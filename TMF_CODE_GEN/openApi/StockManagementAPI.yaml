{
  "openapi": "3.0.1",
  "info": {
    "title": "Stock Management",
    "description": "**TMF API Reference : TMF 687 - Stock Management**\n\nRelease : 20.0 - January 2020\n\nThe Stock Management API provides standardized mechanism for product stock management such as creation, update and retrieval of the representation of a product stock, reserve product stock, check or query product stock or Adjust product Stock. It also allows the notification of events related to them\n\nCopyright Â© TM Forum 2019. All Rights Reserved\n\n\n",
    "version": "4.0.0"
  },
  "servers": [
    {
      "url": "https://serverRoot/tmf-api/stock/v4/"
    }
  ],
  "tags": [
    {
      "name": "productStock"
    },
    {
      "name": "adjustProductStock"
    },
    {
      "name": "checkProductStock"
    },
    {
      "name": "reserveProductStock"
    },
    {
      "name": "queryProductStock"
    },
    {
      "name": "notification listeners (client side)"
    },
    {
      "name": "events subscription"
    }
  ],
  "paths": {
    "/productStock": {
      "get": {
        "tags": [
          "productStock"
        ],
        "summary": "List or find ProductStock objects",
        "description": "This operation list or find ProductStock entities",
        "operationId": "listProductStock",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductStock"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productStock"
        ],
        "summary": "Creates a ProductStock",
        "description": "This operation creates a ProductStock entity.",
        "operationId": "createProductStock",
        "requestBody": {
          "description": "The ProductStock to be created",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProductStock_Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStock"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "productStock"
      }
    },
    "/productStock/{id}": {
      "get": {
        "tags": [
          "productStock"
        ],
        "summary": "Retrieves a ProductStock by ID",
        "description": "This operation retrieves a ProductStock entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveProductStock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductStock",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStock"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productStock"
        ],
        "summary": "Deletes a ProductStock",
        "description": "This operation deletes a ProductStock entity.",
        "operationId": "deleteProductStock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductStock",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "productStock"
        ],
        "summary": "Updates partially a ProductStock",
        "description": "This operation updates partially a ProductStock entity.",
        "operationId": "patchProductStock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ProductStock",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ProductStock to be updated",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProductStock_Update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProductStock"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "productStock"
      }
    },
    "/adjustProductStock": {
      "get": {
        "tags": [
          "adjustProductStock"
        ],
        "summary": "List or find AdjustProductStock objects",
        "description": "This operation list or find AdjustProductStock entities",
        "operationId": "listAdjustProductStock",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdjustProductStock"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "adjustProductStock"
        ],
        "summary": "Creates a AdjustProductStock",
        "description": "This operation creates a AdjustProductStock entity.",
        "operationId": "createAdjustProductStock",
        "requestBody": {
          "description": "The AdjustProductStock to be created",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/AdjustProductStock_Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustProductStock"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustProductStock"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "adjustProductStock"
      }
    },
    "/adjustProductStock/{id}": {
      "get": {
        "tags": [
          "adjustProductStock"
        ],
        "summary": "Retrieves a AdjustProductStock by ID",
        "description": "This operation retrieves a AdjustProductStock entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveAdjustProductStock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the AdjustProductStock",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustProductStock"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/checkProductStock": {
      "get": {
        "tags": [
          "checkProductStock"
        ],
        "summary": "List or find CheckProductStock objects",
        "description": "This operation list or find CheckProductStock entities",
        "operationId": "listCheckProductStock",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckProductStock"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "checkProductStock"
        ],
        "summary": "Creates a CheckProductStock",
        "description": "This operation creates a CheckProductStock entity.",
        "operationId": "createCheckProductStock",
        "requestBody": {
          "description": "The CheckProductStock to be created",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CheckProductStock_Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CheckProductStock"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CheckProductStock"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "checkProductStock"
      }
    },
    "/checkProductStock/{id}": {
      "get": {
        "tags": [
          "checkProductStock"
        ],
        "summary": "Retrieves a CheckProductStock by ID",
        "description": "This operation retrieves a CheckProductStock entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveCheckProductStock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the CheckProductStock",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/CheckProductStock"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/reserveProductStock": {
      "get": {
        "tags": [
          "reserveProductStock"
        ],
        "summary": "List or find ReserveProductStock objects",
        "description": "This operation list or find ReserveProductStock entities",
        "operationId": "listReserveProductStock",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReserveProductStock"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "reserveProductStock"
        ],
        "summary": "Creates a ReserveProductStock",
        "description": "This operation creates a ReserveProductStock entity.",
        "operationId": "createReserveProductStock",
        "requestBody": {
          "description": "The ReserveProductStock to be created",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ReserveProductStock_Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ReserveProductStock"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ReserveProductStock"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "reserveProductStock"
      }
    },
    "/reserveProductStock/{id}": {
      "get": {
        "tags": [
          "reserveProductStock"
        ],
        "summary": "Retrieves a ReserveProductStock by ID",
        "description": "This operation retrieves a ReserveProductStock entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveReserveProductStock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ReserveProductStock",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ReserveProductStock"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/queryProductStock": {
      "get": {
        "tags": [
          "queryProductStock"
        ],
        "summary": "List or find QueryProductStock objects",
        "description": "This operation list or find QueryProductStock entities",
        "operationId": "listQueryProductStock",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueryProductStock"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "queryProductStock"
        ],
        "summary": "Creates a QueryProductStock",
        "description": "This operation creates a QueryProductStock entity.",
        "operationId": "createQueryProductStock",
        "requestBody": {
          "description": "The QueryProductStock to be created",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/QueryProductStock_Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/QueryProductStock"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/QueryProductStock"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "queryProductStock"
      }
    },
    "/queryProductStock/{id}": {
      "get": {
        "tags": [
          "queryProductStock"
        ],
        "summary": "Retrieves a QueryProductStock by ID",
        "description": "This operation retrieves a QueryProductStock entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveQueryProductStock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the QueryProductStock",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/QueryProductStock"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/hub": {
      "post": {
        "tags": [
          "events subscription"
        ],
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "registerListener",
        "requestBody": {
          "description": "Data containing the callback endpoint to deliver the information",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscriptionInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Subscribed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/hub/{id}": {
      "delete": {
        "tags": [
          "events subscription"
        ],
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "unregisterListener",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the registered listener",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/listener/productStockCreateEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ProductStockCreateEvent",
        "description": "Example of a client listener for receiving the notification ProductStockCreateEvent",
        "operationId": "listenToProductStockCreateEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProductStockCreateEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/productStockAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ProductStockAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification ProductStockAttributeValueChangeEvent",
        "operationId": "listenToProductStockAttributeValueChangeEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProductStockAttributeValueChangeEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/productStockStateChangeEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ProductStockStateChangeEvent",
        "description": "Example of a client listener for receiving the notification ProductStockStateChangeEvent",
        "operationId": "listenToProductStockStateChangeEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProductStockStateChangeEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/productStockBatchEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ProductStockBatchEvent",
        "description": "Example of a client listener for receiving the notification ProductStockBatchEvent",
        "operationId": "listenToProductStockBatchEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProductStockBatchEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/productStockDeleteEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ProductStockDeleteEvent",
        "description": "Example of a client listener for receiving the notification ProductStockDeleteEvent",
        "operationId": "listenToProductStockDeleteEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ProductStockDeleteEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/adjustProductStockCreateEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity AdjustProductStockCreateEvent",
        "description": "Example of a client listener for receiving the notification AdjustProductStockCreateEvent",
        "operationId": "listenToAdjustProductStockCreateEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/AdjustProductStockCreateEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/adjustProductStockAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity AdjustProductStockAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification AdjustProductStockAttributeValueChangeEvent",
        "operationId": "listenToAdjustProductStockAttributeValueChangeEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/AdjustProductStockAttributeValueChangeEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/adjustProductStockStateChangeEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity AdjustProductStockStateChangeEvent",
        "description": "Example of a client listener for receiving the notification AdjustProductStockStateChangeEvent",
        "operationId": "listenToAdjustProductStockStateChangeEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/AdjustProductStockStateChangeEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/adjustProductStockBatchEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity AdjustProductStockBatchEvent",
        "description": "Example of a client listener for receiving the notification AdjustProductStockBatchEvent",
        "operationId": "listenToAdjustProductStockBatchEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/AdjustProductStockBatchEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/checkProductStockCreateEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity CheckProductStockCreateEvent",
        "description": "Example of a client listener for receiving the notification CheckProductStockCreateEvent",
        "operationId": "listenToCheckProductStockCreateEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CheckProductStockCreateEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/checkProductStockAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity CheckProductStockAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification CheckProductStockAttributeValueChangeEvent",
        "operationId": "listenToCheckProductStockAttributeValueChangeEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CheckProductStockAttributeValueChangeEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/checkProductStockStateChangeEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity CheckProductStockStateChangeEvent",
        "description": "Example of a client listener for receiving the notification CheckProductStockStateChangeEvent",
        "operationId": "listenToCheckProductStockStateChangeEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CheckProductStockStateChangeEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/checkProductStockBatchEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity CheckProductStockBatchEvent",
        "description": "Example of a client listener for receiving the notification CheckProductStockBatchEvent",
        "operationId": "listenToCheckProductStockBatchEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/CheckProductStockBatchEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/reserveProductStockCreateEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ReserveProductStockCreateEvent",
        "description": "Example of a client listener for receiving the notification ReserveProductStockCreateEvent",
        "operationId": "listenToReserveProductStockCreateEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ReserveProductStockCreateEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/reserveProductStockAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ReserveProductStockAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification ReserveProductStockAttributeValueChangeEvent",
        "operationId": "listenToReserveProductStockAttributeValueChangeEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ReserveProductStockAttributeValueChangeEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/reserveProductStockStateChangeEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ReserveProductStockStateChangeEvent",
        "description": "Example of a client listener for receiving the notification ReserveProductStockStateChangeEvent",
        "operationId": "listenToReserveProductStockStateChangeEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ReserveProductStockStateChangeEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/reserveProductStockBatchEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ReserveProductStockBatchEvent",
        "description": "Example of a client listener for receiving the notification ReserveProductStockBatchEvent",
        "operationId": "listenToReserveProductStockBatchEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ReserveProductStockBatchEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/queryProductStockCreateEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity QueryProductStockCreateEvent",
        "description": "Example of a client listener for receiving the notification QueryProductStockCreateEvent",
        "operationId": "listenToQueryProductStockCreateEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/QueryProductStockCreateEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/queryProductStockAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity QueryProductStockAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification QueryProductStockAttributeValueChangeEvent",
        "operationId": "listenToQueryProductStockAttributeValueChangeEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/QueryProductStockAttributeValueChangeEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/queryProductStockStateChangeEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity QueryProductStockStateChangeEvent",
        "description": "Example of a client listener for receiving the notification QueryProductStockStateChangeEvent",
        "operationId": "listenToQueryProductStockStateChangeEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/QueryProductStockStateChangeEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/queryProductStockBatchEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity QueryProductStockBatchEvent",
        "description": "Example of a client listener for receiving the notification QueryProductStockBatchEvent",
        "operationId": "listenToQueryProductStockBatchEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/QueryProductStockBatchEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    }
  },
  "components": {
    "schemas": {
      "Addressable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          }
        },
        "description": "Base schema for adressable entities"
      },
      "AdjustProductStock": {
        "required": [
          "adjustProductStockItem"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the AdjustProductStock"
          },
          "href": {
            "type": "string",
            "description": "Reference of the AdjustProductStock"
          },
          "adjustReason": {
            "type": "string",
            "description": "A reason for this product stock adjustment like theft or wastage."
          },
          "completedAdjustProductStockDate": {
            "type": "string",
            "description": "Date when the AdjustProductStock was created (whatever its status).",
            "format": "date-time"
          },
          "creationDate": {
            "type": "string",
            "description": "Date when the AdjustProductStock was created (whatever its status).",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "description": "Free-text description of the AdjustProductStock"
          },
          "instantSyncAdjust": {
            "type": "boolean",
            "description": "An indicator which when the value is \"true\" means that requester expects the adjustment immediately. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
          },
          "requestedAdjustProductStockDate": {
            "type": "string",
            "description": "Date when the AdjustProductStock was created (whatever its status).",
            "format": "date-time"
          },
          "adjustProductStockItem": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdjustProductStockItem"
            }
          },
          "state": {
            "$ref": "#/components/schemas/TaskStateType"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "AdjustProductStock is used to log and execute on or several Product Stock level change"
      },
      "AdjustProductStock_Create": {
        "required": [
          "adjustProductStockItem"
        ],
        "type": "object",
        "properties": {
          "adjustReason": {
            "type": "string",
            "description": "A reason for this product stock adjustment like theft or wastage."
          },
          "completedAdjustProductStockDate": {
            "type": "string",
            "description": "Date when the AdjustProductStock was created (whatever its status).",
            "format": "date-time"
          },
          "creationDate": {
            "type": "string",
            "description": "Date when the AdjustProductStock was created (whatever its status).",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "description": "Free-text description of the AdjustProductStock"
          },
          "instantSyncAdjust": {
            "type": "boolean",
            "description": "An indicator which when the value is \"true\" means that requester expects the adjustment immediately. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
          },
          "requestedAdjustProductStockDate": {
            "type": "string",
            "description": "Date when the AdjustProductStock was created (whatever its status).",
            "format": "date-time"
          },
          "adjustProductStockItem": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdjustProductStockItem"
            }
          },
          "state": {
            "$ref": "#/components/schemas/TaskStateType"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "AdjustProductStock is used to log and execute on or several Product Stock level change\nSkipped properties: id,href"
      },
      "AdjustProductStockItem": {
        "required": [
          "adjustProductStockQuantity",
          "id",
          "productStockTarget"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the AdjustProductStockItem"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "adjustProductStockQuantity": {
            "$ref": "#/components/schemas/Quantity"
          },
          "productStockTarget": {
            "$ref": "#/components/schemas/ProductStockRef"
          },
          "state": {
            "$ref": "#/components/schemas/TaskStateType"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "A list of AdjustProductStock items. Every item is a ProductStock adjustement request."
      },
      "AgreementItemRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "agreementItemId": {
            "type": "string",
            "description": "Identifier of the agreement"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications."
      },
      "AlternateProductStock": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "identifier of the Alternate product stock "
          },
          "alternateAvailabilityDate": {
            "type": "string",
            "description": "Alternate date when the product stock is available.",
            "format": "date-time"
          },
          "alternatePlace": {
            "$ref": "#/components/schemas/PlaceRefOrValue"
          },
          "alternateProduct": {
            "$ref": "#/components/schemas/ProductRefOrValue"
          },
          "alternateQuantity": {
            "$ref": "#/components/schemas/Quantity"
          },
          "alternateStock": {
            "$ref": "#/components/schemas/ProductStockRef"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "AlternateProductStock is used to log and execute Alternate about product  stock availability"
      },
      "Any": {
        "type": "object"
      },
      "BillingAccountRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the billing account"
          },
          "href": {
            "type": "string",
            "description": "Reference of the billing account"
          },
          "name": {
            "type": "string",
            "description": "Name of the billing account"
          },
          "ratingType": {
            "type": "string",
            "description": "Indicates whether the account follows a specific payment option such as prepaid or postpaid"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "BillingAccount reference. A BillingAccount is a detailed description of a bill structure."
      },
      "ChannelRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the channel."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "The channel to which the resource reference to. e.g. channel for selling product offerings, channel for opening a trouble ticket etc.."
      },
      "Characteristic": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the characteristic"
          },
          "name": {
            "type": "string",
            "description": "Name of the characteristic"
          },
          "valueType": {
            "type": "string",
            "description": "Data type of the value of the characteristic"
          },
          "characteristicRelationship": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacteristicRelationship"
            }
          },
          "value": {
            "$ref": "#/components/schemas/Any"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Describes a given characteristic of an object or entity through a name/value pair."
      },
      "CharacteristicRelationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the characteristic"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "relationshipType": {
            "type": "string",
            "description": "The type of relationship"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Another Characteristic that is related to the current Characteristic;"
      },
      "CheckProductStock": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the CheckProductStock"
          },
          "href": {
            "type": "string",
            "description": "Reference of the CheckProductStock"
          },
          "completedCheckProductStockDate": {
            "type": "string",
            "description": "Date when the CheckProductStock was completed.",
            "format": "date-time"
          },
          "creationDate": {
            "type": "string",
            "description": "Date when the CheckProductStock was created (whatever its status).",
            "format": "date-time"
          },
          "instantSyncCheck": {
            "type": "boolean",
            "description": "An indicator which when the value is \"true\" means that requester expects to get result immediately in the response. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
          },
          "provideAlternative": {
            "type": "boolean",
            "description": "When the value is TRUE means that alternative proposal should be provided (from other product stock, different date or quantity)",
            "default": false
          },
          "requestedAvailabilityDate": {
            "type": "string",
            "description": "Date when the stock availability should be check.",
            "format": "date-time"
          },
          "requestedCheckProductStockDate": {
            "type": "string",
            "description": "Date when the requester wished to have a response for this product stock check query.",
            "format": "date-time"
          },
          "checkProductStockItem": {
            "type": "array",
            "description": "A list of check product stock  item",
            "items": {
              "$ref": "#/components/schemas/CheckProductStockItem"
            }
          },
          "place": {
            "$ref": "#/components/schemas/PlaceRefOrValue"
          },
          "relatedParty": {
            "type": "array",
            "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to this CheckProductStock",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "state": {
            "$ref": "#/components/schemas/TaskStateType"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "CheckProductStock is used to log and execute check about product stock availability"
      },
      "CheckProductStock_Create": {
        "required": [
          "checkProductStockItem"
        ],
        "type": "object",
        "properties": {
          "completedCheckProductStockDate": {
            "type": "string",
            "description": "Date when the CheckProductStock was completed.",
            "format": "date-time"
          },
          "creationDate": {
            "type": "string",
            "description": "Date when the CheckProductStock was created (whatever its status).",
            "format": "date-time"
          },
          "instantSyncCheck": {
            "type": "boolean",
            "description": "An indicator which when the value is \"true\" means that requester expects to get result immediately in the response. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
          },
          "provideAlternative": {
            "type": "boolean",
            "description": "When the value is TRUE means that alternative proposal should be provided (from other product stock, different date or quantity)",
            "default": false
          },
          "requestedAvailabilityDate": {
            "type": "string",
            "description": "Date when the stock availability should be check.",
            "format": "date-time"
          },
          "requestedCheckProductStockDate": {
            "type": "string",
            "description": "Date when the requester wished to have a response for this product stock check query.",
            "format": "date-time"
          },
          "checkProductStockItem": {
            "minItems": 1,
            "type": "array",
            "description": "A list of check product stock  item",
            "items": {
              "$ref": "#/components/schemas/CheckProductStockItem"
            }
          },
          "place": {
            "$ref": "#/components/schemas/PlaceRefOrValue"
          },
          "relatedParty": {
            "type": "array",
            "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to this CheckProductStock",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "state": {
            "$ref": "#/components/schemas/TaskStateType"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "CheckProductStock is used to log and execute check about product stock availability\nSkipped properties: id,href"
      },
      "CheckProductStockItem": {
        "required": [
          "checkedProductStock",
          "id",
          "requestedQuantity"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the Check Product Stock item"
          },
          "availabilityResult": {
            "type": "string",
            "description": "Result of the availability like available, notAvailable, alternate"
          },
          "provideAlternative": {
            "type": "boolean",
            "description": "When the value is TRUE means that alternative proposal should be provided (from other product stock, different date or quantity)",
            "default": false
          },
          "alternate": {
            "type": "array",
            "description": "A list of alternate availability - from other product stock , different date or quantity",
            "items": {
              "$ref": "#/components/schemas/AlternateProductStock"
            }
          },
          "checkedProductStock": {
            "$ref": "#/components/schemas/ProductStock"
          },
          "requestedQuantity": {
            "$ref": "#/components/schemas/Quantity"
          },
          "state": {
            "$ref": "#/components/schemas/TaskStateType"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "CheckProductStockItem is used to log and execute query about one product (or configured product) stock availability"
      },
      "Entity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Base entity schema for use in TMForum Open-APIs"
      },
      "EntityRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Entity reference schema to be use for all entityRef class."
      },
      "Extensible": {
        "type": "object",
        "properties": {
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Base Extensible schema for use in TMForum Open-APIs"
      },
      "MarketSegmentRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the market segment"
          },
          "href": {
            "type": "string",
            "description": "Reference of the market segment"
          },
          "name": {
            "type": "string",
            "description": "Name of the market segment"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "(Class) type of the referred market segment"
          }
        },
        "description": "provides references to the corresponding market segment as target of product offerings. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth."
      },
      "Money": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "unit": {
            "type": "string",
            "description": "Currency (ISO4217 norm uses 3 letters to define the currency)"
          },
          "value": {
            "type": "number",
            "description": "A positive floating point number",
            "format": "float"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "A base / value business entity used to represent money"
      },
      "Place": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the place"
          },
          "href": {
            "type": "string",
            "description": "Unique reference of the place"
          },
          "name": {
            "type": "string",
            "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Place reference. Place defines the places where the products are sold or delivered."
      },
      "PlaceRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Place reference. PlaceRef defines the placeRefs where the products are sold or delivered."
      },
      "PlaceRefOrValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the place"
          },
          "href": {
            "type": "string",
            "description": "Unique reference of the place"
          },
          "name": {
            "type": "string",
            "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "A place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself"
      },
      "Price": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "percentage": {
            "type": "number",
            "description": "Percentage to apply for ProdOfferPriceAlteration",
            "format": "float"
          },
          "taxRate": {
            "type": "number",
            "description": "Tax rate",
            "format": "float"
          },
          "dutyFreeAmount": {
            "$ref": "#/components/schemas/Money"
          },
          "taxIncludedAmount": {
            "$ref": "#/components/schemas/Money"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration."
      },
      "PriceAlteration": {
        "required": [
          "price",
          "priceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "applicationDuration": {
            "type": "integer",
            "description": "Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge)"
          },
          "description": {
            "type": "string",
            "description": "A narrative that explains in detail the semantics of this order item price alteration"
          },
          "name": {
            "type": "string",
            "description": "Name of the order item price alteration"
          },
          "priceType": {
            "type": "string",
            "description": "A category that describes the price such as recurring, one time and usage."
          },
          "priority": {
            "type": "integer",
            "description": "Priority level for applying this alteration among all the defined alterations on the order item price"
          },
          "recurringChargePeriod": {
            "type": "string",
            "description": "Could be month, week..."
          },
          "unitOfMeasure": {
            "type": "string",
            "description": "Could be minutes, GB..."
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "productOfferingPrice": {
            "$ref": "#/components/schemas/ProductOfferingPriceRef"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Is an amount, usually of money, that modifies the price charged for an order item."
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the product"
          },
          "href": {
            "type": "string",
            "description": "Reference of the product"
          },
          "description": {
            "type": "string",
            "description": "Is the description of the product. It could be copied from the description of the Product Offering."
          },
          "isBundle": {
            "type": "boolean",
            "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
          },
          "isCustomerVisible": {
            "type": "boolean",
            "description": "If true, the product is visible by the customer."
          },
          "name": {
            "type": "string",
            "description": "Name of the product. It could be the same as the name of the product offering"
          },
          "orderDate": {
            "type": "string",
            "description": "Is the date when the product was ordered",
            "format": "date-time"
          },
          "productSerialNumber": {
            "type": "string",
            "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router."
          },
          "randomAtt": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "description": "Is the date from which the product starts",
            "format": "date-time"
          },
          "terminationDate": {
            "type": "string",
            "description": "Is the date when the product was terminated",
            "format": "date-time"
          },
          "agreement": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgreementItemRef"
            }
          },
          "billingAccount": {
            "$ref": "#/components/schemas/BillingAccountRef"
          },
          "place": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
            }
          },
          "product": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductRefOrValue"
            }
          },
          "productCharacteristic": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Characteristic"
            }
          },
          "productOffering": {
            "$ref": "#/components/schemas/ProductOfferingRef"
          },
          "productOrderItem": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedProductOrderItem"
            }
          },
          "productPrice": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductPrice"
            }
          },
          "productRelationship": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductRelationship"
            }
          },
          "productSpecification": {
            "$ref": "#/components/schemas/ProductSpecificationRef"
          },
          "productTerm": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTerm"
            }
          },
          "realizingResource": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRef"
            }
          },
          "realizingService": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceRef"
            }
          },
          "relatedParty": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ProductStatusType"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "A product offering procured by a customer or other interested party playing a party role. A product is realized as one or more service(s) and / or resource(s)."
      },
      "ProductOfferingPriceRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "ProductPriceOffering reference. An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased"
      },
      "ProductOfferingRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information."
      },
      "ProductPrice": {
        "required": [
          "price",
          "priceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "description": "A narrative that explains in detail the semantics of this product price."
          },
          "name": {
            "type": "string",
            "description": "A short descriptive name such as \"Subscription price\"."
          },
          "priceType": {
            "type": "string",
            "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
          },
          "recurringChargePeriod": {
            "type": "string",
            "description": "Could be month, week..."
          },
          "unitOfMeasure": {
            "type": "string",
            "description": "Could be minutes, GB..."
          },
          "billingAccount": {
            "$ref": "#/components/schemas/BillingAccountRef"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "productOfferingPrice": {
            "$ref": "#/components/schemas/ProductOfferingPriceRef"
          },
          "productPriceAlteration": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceAlteration"
            }
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "An amount, usually of money, that represents the actual price paid by a Customer for a purchase, a rent or a lease of a Product. The price is valid for a defined period of time."
      },
      "ProductRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        }
      },
      "ProductRefOrValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the product"
          },
          "href": {
            "type": "string",
            "description": "Reference of the product"
          },
          "description": {
            "type": "string",
            "description": "Is the description of the product. It could be copied from the description of the Product Offering."
          },
          "isBundle": {
            "type": "boolean",
            "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
          },
          "isCustomerVisible": {
            "type": "boolean",
            "description": "If true, the product is visible by the customer."
          },
          "name": {
            "type": "string",
            "description": "Name of the product. It could be the same as the name of the product offering"
          },
          "orderDate": {
            "type": "string",
            "description": "Is the date when the product was ordered",
            "format": "date-time"
          },
          "productSerialNumber": {
            "type": "string",
            "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router."
          },
          "randomAtt": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "description": "Is the date from which the product starts",
            "format": "date-time"
          },
          "terminationDate": {
            "type": "string",
            "description": "Is the date when the product was terminated",
            "format": "date-time"
          },
          "agreement": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgreementItemRef"
            }
          },
          "billingAccount": {
            "$ref": "#/components/schemas/BillingAccountRef"
          },
          "place": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
            }
          },
          "product": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductRefOrValue"
            }
          },
          "productCharacteristic": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Characteristic"
            }
          },
          "productOffering": {
            "$ref": "#/components/schemas/ProductOfferingRef"
          },
          "productOrderItem": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedProductOrderItem"
            }
          },
          "productPrice": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductPrice"
            }
          },
          "productRelationship": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductRelationship"
            }
          },
          "productSpecification": {
            "$ref": "#/components/schemas/ProductSpecificationRef"
          },
          "productTerm": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTerm"
            }
          },
          "realizingResource": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRef"
            }
          },
          "realizingService": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceRef"
            }
          },
          "relatedParty": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ProductStatusType"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "A product to be created defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the product entity and not the RelatedProductRefOrValue class itself"
      },
      "ProductRelationship": {
        "required": [
          "product",
          "relationshipType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of the product relationship, such as [bundled] if the product is a bundle and you want to describe the bundled products inside this bundle; [reliesOn] if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful"
          },
          "product": {
            "$ref": "#/components/schemas/ProductRefOrValue"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Linked products to the one instantiate, such as [bundled] if the product is a bundle and you want to describe the bundled products inside this bundle; [reliesOn] if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful"
      },
      "ProductSpecificationRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "Version of the product specification"
          },
          "targetProductSchema": {
            "$ref": "#/components/schemas/TargetProductSchema"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Product specification reference: A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role."
      },
      "ProductStatusType": {
        "type": "string",
        "description": "Possible values for the status of the product",
        "enum": [
          "created",
          "pendingActive",
          "cancelled",
          "active",
          "pendingTerminate",
          "terminated",
          "suspended",
          "aborted "
        ]
      },
      "ProductStock": {
        "required": [
          "productStockLevel",
          "stockedProduct"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the ProductStock"
          },
          "href": {
            "type": "string",
            "description": "Reference of the ProductStock"
          },
          "creationDate": {
            "type": "string",
            "description": "Date when the ProductStock was created (whatever its status).",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "description": "Free-text description of the ProductStock"
          },
          "lastInventoryDate": {
            "type": "string",
            "description": "Last inventory count date for this ProductStock.",
            "format": "date-time"
          },
          "lastUpdate": {
            "type": "string",
            "description": "Last date when the ProductStock record was updated.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "Name of the ProductStock"
          },
          "replenishmentDate": {
            "type": "string",
            "description": "Planned date for future replenishment for this ProductStock.",
            "format": "date-time"
          },
          "stockLevelCategory": {
            "type": "string",
            "description": "Category of the ProductStock"
          },
          "channel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelRef"
            }
          },
          "marketSegment": {
            "type": "array",
            "description": "provides references to the corresponding market segment as target of a product stock. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth.",
            "items": {
              "$ref": "#/components/schemas/MarketSegmentRef"
            }
          },
          "maxStockLevel": {
            "$ref": "#/components/schemas/Quantity"
          },
          "minStockLevel": {
            "$ref": "#/components/schemas/Quantity"
          },
          "place": {
            "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
          },
          "productStockLevel": {
            "$ref": "#/components/schemas/Quantity"
          },
          "productStockRelationship": {
            "type": "array",
            "description": "relationship to other product stock",
            "items": {
              "$ref": "#/components/schemas/ProductStockRelationship"
            }
          },
          "productStockStatusType": {
            "$ref": "#/components/schemas/ProductStockStatusType"
          },
          "productStockUsageType": {
            "$ref": "#/components/schemas/ProductStockUsageType"
          },
          "relatedParty": {
            "type": "array",
            "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "reorderQuantity": {
            "$ref": "#/components/schemas/Quantity"
          },
          "resource": {
            "type": "array",
            "description": "The Resource managed through this ProductStock is used",
            "items": {
              "$ref": "#/components/schemas/ResourceRef"
            }
          },
          "stockLevelAlert": {
            "$ref": "#/components/schemas/Quantity"
          },
          "stockedProduct": {
            "$ref": "#/components/schemas/ProductRefOrValue"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "ProductStock is a base class for defining a product (or configured product with values characteristic) stock level."
      },
      "ProductStock_Create": {
        "required": [
          "productStockLevel",
          "productStockStatusType",
          "stockedProduct"
        ],
        "type": "object",
        "properties": {
          "creationDate": {
            "type": "string",
            "description": "Date when the ProductStock was created (whatever its status).",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "description": "Free-text description of the ProductStock"
          },
          "lastInventoryDate": {
            "type": "string",
            "description": "Last inventory count date for this ProductStock.",
            "format": "date-time"
          },
          "lastUpdate": {
            "type": "string",
            "description": "Last date when the ProductStock record was updated.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "Name of the ProductStock"
          },
          "replenishmentDate": {
            "type": "string",
            "description": "Planned date for future replenishment for this ProductStock.",
            "format": "date-time"
          },
          "stockLevelCategory": {
            "type": "string",
            "description": "Category of the ProductStock"
          },
          "channel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelRef"
            }
          },
          "marketSegment": {
            "type": "array",
            "description": "provides references to the corresponding market segment as target of a product stock. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth.",
            "items": {
              "$ref": "#/components/schemas/MarketSegmentRef"
            }
          },
          "maxStockLevel": {
            "$ref": "#/components/schemas/Quantity"
          },
          "minStockLevel": {
            "$ref": "#/components/schemas/Quantity"
          },
          "place": {
            "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
          },
          "productStockLevel": {
            "$ref": "#/components/schemas/Quantity"
          },
          "productStockRelationship": {
            "type": "array",
            "description": "relationship to other product stock",
            "items": {
              "$ref": "#/components/schemas/ProductStockRelationship"
            }
          },
          "productStockStatusType": {
            "$ref": "#/components/schemas/ProductStockStatusType"
          },
          "productStockUsageType": {
            "$ref": "#/components/schemas/ProductStockUsageType"
          },
          "relatedParty": {
            "type": "array",
            "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "reorderQuantity": {
            "$ref": "#/components/schemas/Quantity"
          },
          "resource": {
            "type": "array",
            "description": "The Resource managed through this ProductStock is used",
            "items": {
              "$ref": "#/components/schemas/ResourceRef"
            }
          },
          "stockLevelAlert": {
            "$ref": "#/components/schemas/Quantity"
          },
          "stockedProduct": {
            "$ref": "#/components/schemas/ProductRefOrValue"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "ProductStock is a base class for defining a product (or configured product with values characteristic) stock level.\nSkipped properties: id,href"
      },
      "ProductStock_Update": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Free-text description of the ProductStock"
          },
          "lastInventoryDate": {
            "type": "string",
            "description": "Last inventory count date for this ProductStock.",
            "format": "date-time"
          },
          "lastUpdate": {
            "type": "string",
            "description": "Last date when the ProductStock record was updated.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "Name of the ProductStock"
          },
          "replenishmentDate": {
            "type": "string",
            "description": "Planned date for future replenishment for this ProductStock.",
            "format": "date-time"
          },
          "stockLevelCategory": {
            "type": "string",
            "description": "Category of the ProductStock"
          },
          "channel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelRef"
            }
          },
          "marketSegment": {
            "type": "array",
            "description": "provides references to the corresponding market segment as target of a product stock. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth.",
            "items": {
              "$ref": "#/components/schemas/MarketSegmentRef"
            }
          },
          "maxStockLevel": {
            "$ref": "#/components/schemas/Quantity"
          },
          "minStockLevel": {
            "$ref": "#/components/schemas/Quantity"
          },
          "place": {
            "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
          },
          "productStockLevel": {
            "$ref": "#/components/schemas/Quantity"
          },
          "productStockRelationship": {
            "type": "array",
            "description": "relationship to other product stock",
            "items": {
              "$ref": "#/components/schemas/ProductStockRelationship"
            }
          },
          "productStockStatusType": {
            "$ref": "#/components/schemas/ProductStockStatusType"
          },
          "productStockUsageType": {
            "$ref": "#/components/schemas/ProductStockUsageType"
          },
          "relatedParty": {
            "type": "array",
            "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "reorderQuantity": {
            "$ref": "#/components/schemas/Quantity"
          },
          "resource": {
            "type": "array",
            "description": "The Resource managed through this ProductStock is used",
            "items": {
              "$ref": "#/components/schemas/ResourceRef"
            }
          },
          "stockLevelAlert": {
            "$ref": "#/components/schemas/Quantity"
          },
          "stockedProduct": {
            "$ref": "#/components/schemas/ProductRefOrValue"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "ProductStock is a base class for defining a product (or configured product with values characteristic) stock level.\nSkipped properties: id,href,creationDate"
      },
      "ProductStockRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the ProductStockRef"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "ProductStockRef is a reference to a product stock"
      },
      "ProductStockRelationship": {
        "required": [
          "relationshipType"
        ],
        "type": "object",
        "properties": {
          "relationshipType": {
            "type": "string",
            "description": "The type of relationship between product stock"
          },
          "stockLevel": {
            "$ref": "#/components/schemas/ProductStockRef"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Linked product stock  with a type relationship."
      },
      "ProductStockStatusType": {
        "type": "string",
        "description": "Possible values for the status of the stock  level",
        "enum": [
          "reserved",
          "available",
          "unavailable",
          "unknown"
        ]
      },
      "ProductStockUsageType": {
        "type": "string",
        "description": "Possible values for the usage of the stock level - This is illustrative",
        "enum": [
          "inTransit",
          "onDisplay",
          "damaged",
          "returned",
          "replenishmentInProgress",
          "inShop"
        ]
      },
      "ProductTerm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "description": "Description of the productTerm"
          },
          "name": {
            "type": "string",
            "description": "Name of the productTerm"
          },
          "duration": {
            "$ref": "#/components/schemas/Quantity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Description of a productTerm linked to this product. This represent a commitment with a duration"
      },
      "Quantity": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Numeric value in a given unit",
            "format": "float",
            "default": 1
          },
          "units": {
            "type": "string",
            "description": "Unit"
          }
        },
        "description": "An amount in a given unit"
      },
      "QueryProductStock": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the QueryProductStock"
          },
          "href": {
            "type": "string",
            "description": "Reference of the QueryProductStock"
          },
          "completedQueryProductStockDate": {
            "type": "string",
            "description": "Date when the QueryProductStock was completed.",
            "format": "date-time"
          },
          "creationDate": {
            "type": "string",
            "description": "Date when the QueryProductStock was created.",
            "format": "date-time"
          },
          "instantSyncCheck": {
            "type": "boolean",
            "description": "An indicator which when the value is \"true\" means that requester expects to get result immediately in the response. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
          },
          "requestedAvailabilityDate": {
            "type": "string",
            "description": "Date when the stock availability should be query.",
            "format": "date-time"
          },
          "requestedQueryProductStockDate": {
            "type": "string",
            "description": "Date when the requester wished to have a response for this product stock query.",
            "format": "date-time"
          },
          "queryProductStockItem": {
            "type": "array",
            "description": "A list of query product stock item - only present in response",
            "items": {
              "$ref": "#/components/schemas/ProductStock"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to this QueryProductStock",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "searchCriteria": {
            "$ref": "#/components/schemas/ProductStock"
          },
          "state": {
            "$ref": "#/components/schemas/TaskStateType"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "QueryProductStock is used to query product stock availability"
      },
      "QueryProductStock_Create": {
        "required": [
          "searchCriteria"
        ],
        "type": "object",
        "properties": {
          "completedQueryProductStockDate": {
            "type": "string",
            "description": "Date when the QueryProductStock was completed.",
            "format": "date-time"
          },
          "creationDate": {
            "type": "string",
            "description": "Date when the QueryProductStock was created.",
            "format": "date-time"
          },
          "instantSyncCheck": {
            "type": "boolean",
            "description": "An indicator which when the value is \"true\" means that requester expects to get result immediately in the response. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
          },
          "requestedAvailabilityDate": {
            "type": "string",
            "description": "Date when the stock availability should be query.",
            "format": "date-time"
          },
          "requestedQueryProductStockDate": {
            "type": "string",
            "description": "Date when the requester wished to have a response for this product stock query.",
            "format": "date-time"
          },
          "queryProductStockItem": {
            "type": "array",
            "description": "A list of query product stock item - only present in response",
            "items": {
              "$ref": "#/components/schemas/ProductStock"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to this QueryProductStock",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "searchCriteria": {
            "$ref": "#/components/schemas/ProductStock"
          },
          "state": {
            "$ref": "#/components/schemas/TaskStateType"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "QueryProductStock is used to query product stock availability\nSkipped properties: id,href"
      },
      "RelatedEntity": {
        "required": [
          "@referredType",
          "id",
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "role": {
            "type": "string",
            "description": "The role of an entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "A reference to an entity, where the type of the entity is not known in advance."
      },
      "RelatedParty": {
        "required": [
          "@referredType",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "role": {
            "type": "string",
            "description": "Role played by the related party"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Related Entity reference. A related party defines party or party role linked to a specific entity."
      },
      "RelatedPlaceRefOrValue": {
        "required": [
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the place"
          },
          "href": {
            "type": "string",
            "description": "Unique reference of the place"
          },
          "name": {
            "type": "string",
            "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
          },
          "role": {
            "type": "string"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Related Entity reference. A related place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself"
      },
      "RelatedProductOrderItem": {
        "required": [
          "orderItemId",
          "productOrderId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "orderItemAction": {
            "type": "string",
            "description": "Action of the order item for this product"
          },
          "orderItemId": {
            "type": "string",
            "description": "Identifier of the order item where the product was managed"
          },
          "productOrderHref": {
            "type": "string",
            "description": "Reference of the related entity."
          },
          "productOrderId": {
            "type": "string",
            "description": "Unique identifier of a related entity."
          },
          "role": {
            "type": "string",
            "description": "role of the product order item for this product"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "RelatedProductOrderItem (ProductOrder item) .The product order item which triggered product creation/change/termination."
      },
      "ReserveProductStock": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the ReserveProductStock"
          },
          "href": {
            "type": "string",
            "description": "Reference of the ReserveProductStock"
          },
          "creationDate": {
            "type": "string",
            "description": "Date when the ReserveProductStock was created (whatever its status).",
            "format": "date-time"
          },
          "requiredAvailabilityDate": {
            "type": "string",
            "description": "Requested product availability date for the reservation.",
            "format": "date-time"
          },
          "channel": {
            "type": "array",
            "description": "Channel(s) beneficiary(ies) for this reservation",
            "items": {
              "$ref": "#/components/schemas/ChannelRef"
            }
          },
          "marketSegment": {
            "type": "array",
            "description": "Market segment(s) beneficiary(ies) for this reservation",
            "items": {
              "$ref": "#/components/schemas/MarketSegmentRef"
            }
          },
          "place": {
            "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
          },
          "relatedEntity": {
            "type": "array",
            "description": "A list of related  entity in relationship with this stock reservation (trouble ticket, quote, product order, etc...) ",
            "items": {
              "$ref": "#/components/schemas/RelatedEntity"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "reserveProductStockItem": {
            "type": "array",
            "description": "A list of product stock item reservation ",
            "items": {
              "$ref": "#/components/schemas/ReserveProductStockItem"
            }
          },
          "reserveProductStockState": {
            "$ref": "#/components/schemas/TaskStateType"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "ReserveProductStock is used to request a product stock reservation"
      },
      "ReserveProductStock_Create": {
        "required": [
          "reserveProductStockItem"
        ],
        "type": "object",
        "properties": {
          "creationDate": {
            "type": "string",
            "description": "Date when the ReserveProductStock was created (whatever its status).",
            "format": "date-time"
          },
          "requiredAvailabilityDate": {
            "type": "string",
            "description": "Requested product availability date for the reservation.",
            "format": "date-time"
          },
          "channel": {
            "type": "array",
            "description": "Channel(s) beneficiary(ies) for this reservation",
            "items": {
              "$ref": "#/components/schemas/ChannelRef"
            }
          },
          "marketSegment": {
            "type": "array",
            "description": "Market segment(s) beneficiary(ies) for this reservation",
            "items": {
              "$ref": "#/components/schemas/MarketSegmentRef"
            }
          },
          "place": {
            "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
          },
          "relatedEntity": {
            "type": "array",
            "description": "A list of related  entity in relationship with this stock reservation (trouble ticket, quote, product order, etc...) ",
            "items": {
              "$ref": "#/components/schemas/RelatedEntity"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "reserveProductStockItem": {
            "minItems": 1,
            "type": "array",
            "description": "A list of product stock item reservation ",
            "items": {
              "$ref": "#/components/schemas/ReserveProductStockItem"
            }
          },
          "reserveProductStockState": {
            "$ref": "#/components/schemas/TaskStateType"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "ReserveProductStock is used to request a product stock reservation\nSkipped properties: id,href"
      },
      "ReserveProductStockItem": {
        "required": [
          "id",
          "quantityRequested",
          "requestedProduct"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the ReserveProductStockItem."
          },
          "productStockRequested": {
            "$ref": "#/components/schemas/ProductStockRef"
          },
          "productStockReserved": {
            "$ref": "#/components/schemas/ProductStockRef"
          },
          "quantityRequested": {
            "$ref": "#/components/schemas/Quantity"
          },
          "quantityReserved": {
            "$ref": "#/components/schemas/Quantity"
          },
          "requestedProduct": {
            "$ref": "#/components/schemas/ProductRefOrValue"
          },
          "reserveProductStockState": {
            "$ref": "#/components/schemas/TaskStateType"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "ReserveProductStockItem is used to request a stock reservation item for a product"
      },
      "ResourceRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        }
      },
      "ServiceRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Service reference, for when Service is used by other entities"
      },
      "TargetProductSchema": {
        "required": [
          "@schemaLocation",
          "@type"
        ],
        "type": "object",
        "properties": {
          "@schemaLocation": {
            "type": "string",
            "description": "This field provides a link to the schema describing the target product",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "Class type of the target product"
          }
        },
        "description": "The reference object to the schema and type of target product which is described by product specification"
      },
      "TaskStateType": {
        "type": "string",
        "description": "Possible values for the state of a task",
        "enum": [
          "accepted",
          "terminatedWithError",
          "inProgress",
          "done"
        ]
      },
      "TimePeriod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "endDateTime": {
            "type": "string",
            "description": "End of the time period, using IETC-RFC-3339 format",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          },
          "startDateTime": {
            "type": "string",
            "description": "Start of the time period, using IETC-RFC-3339 format",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both"
      },
      "EventSubscription": {
        "required": [
          "callback",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the listener"
          },
          "callback": {
            "type": "string",
            "description": "The callback being registered."
          },
          "query": {
            "type": "string",
            "description": "additional data to be passed"
          }
        },
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
      },
      "EventSubscriptionInput": {
        "required": [
          "callback"
        ],
        "type": "object",
        "properties": {
          "callback": {
            "type": "string",
            "description": "The callback being registered."
          },
          "query": {
            "type": "string",
            "description": "additional data to be passed"
          }
        },
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
      },
      "ProductStockCreateEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/ProductStockCreateEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "ProductStockCreateEventPayload": {
        "type": "object",
        "properties": {
          "productStock": {
            "$ref": "#/components/schemas/ProductStock"
          }
        },
        "description": "The event data structure"
      },
      "ProductStockAttributeValueChangeEvent": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          },
          "fieldPath": {
            "type": "string",
            "description": "The path identifying the object field concerned by this notification."
          },
          "event": {
            "$ref": "#/components/schemas/ProductStockAttributeValueChangeEventPayload"
          }
        },
        "description": "The notification data structure"
      },
      "ProductStockAttributeValueChangeEventPayload": {
        "type": "object",
        "properties": {
          "productStock": {
            "$ref": "#/components/schemas/ProductStock"
          }
        },
        "description": "The event data structure"
      },
      "ProductStockStateChangeEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/ProductStockStateChangeEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "ProductStockStateChangeEventPayload": {
        "type": "object",
        "properties": {
          "productStock": {
            "$ref": "#/components/schemas/ProductStock"
          }
        },
        "description": "The event data structure"
      },
      "ProductStockBatchEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/ProductStockBatchEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "ProductStockBatchEventPayload": {
        "type": "object",
        "properties": {
          "productStock": {
            "$ref": "#/components/schemas/ProductStock"
          }
        },
        "description": "The event data structure"
      },
      "ProductStockDeleteEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/ProductStockDeleteEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "ProductStockDeleteEventPayload": {
        "type": "object",
        "properties": {
          "productStock": {
            "$ref": "#/components/schemas/ProductStock"
          }
        },
        "description": "The event data structure"
      },
      "AdjustProductStockCreateEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/AdjustProductStockCreateEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "AdjustProductStockCreateEventPayload": {
        "type": "object",
        "properties": {
          "adjustProductStock": {
            "$ref": "#/components/schemas/AdjustProductStock"
          }
        },
        "description": "The event data structure"
      },
      "AdjustProductStockAttributeValueChangeEvent": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          },
          "fieldPath": {
            "type": "string",
            "description": "The path identifying the object field concerned by this notification."
          },
          "event": {
            "$ref": "#/components/schemas/AdjustProductStockAttributeValueChangeEventPayload"
          }
        },
        "description": "The notification data structure"
      },
      "AdjustProductStockAttributeValueChangeEventPayload": {
        "type": "object",
        "properties": {
          "adjustProductStock": {
            "$ref": "#/components/schemas/AdjustProductStock"
          }
        },
        "description": "The event data structure"
      },
      "AdjustProductStockStateChangeEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/AdjustProductStockStateChangeEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "AdjustProductStockStateChangeEventPayload": {
        "type": "object",
        "properties": {
          "adjustProductStock": {
            "$ref": "#/components/schemas/AdjustProductStock"
          }
        },
        "description": "The event data structure"
      },
      "AdjustProductStockBatchEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/AdjustProductStockBatchEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "AdjustProductStockBatchEventPayload": {
        "type": "object",
        "properties": {
          "adjustProductStock": {
            "$ref": "#/components/schemas/AdjustProductStock"
          }
        },
        "description": "The event data structure"
      },
      "CheckProductStockCreateEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/CheckProductStockCreateEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "CheckProductStockCreateEventPayload": {
        "type": "object",
        "properties": {
          "checkProductStock": {
            "$ref": "#/components/schemas/CheckProductStock"
          }
        },
        "description": "The event data structure"
      },
      "CheckProductStockAttributeValueChangeEvent": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          },
          "fieldPath": {
            "type": "string",
            "description": "The path identifying the object field concerned by this notification."
          },
          "event": {
            "$ref": "#/components/schemas/CheckProductStockAttributeValueChangeEventPayload"
          }
        },
        "description": "The notification data structure"
      },
      "CheckProductStockAttributeValueChangeEventPayload": {
        "type": "object",
        "properties": {
          "checkProductStock": {
            "$ref": "#/components/schemas/CheckProductStock"
          }
        },
        "description": "The event data structure"
      },
      "CheckProductStockStateChangeEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/CheckProductStockStateChangeEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "CheckProductStockStateChangeEventPayload": {
        "type": "object",
        "properties": {
          "checkProductStock": {
            "$ref": "#/components/schemas/CheckProductStock"
          }
        },
        "description": "The event data structure"
      },
      "CheckProductStockBatchEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/CheckProductStockBatchEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "CheckProductStockBatchEventPayload": {
        "type": "object",
        "properties": {
          "checkProductStock": {
            "$ref": "#/components/schemas/CheckProductStock"
          }
        },
        "description": "The event data structure"
      },
      "ReserveProductStockCreateEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/ReserveProductStockCreateEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "ReserveProductStockCreateEventPayload": {
        "type": "object",
        "properties": {
          "reserveProductStock": {
            "$ref": "#/components/schemas/ReserveProductStock"
          }
        },
        "description": "The event data structure"
      },
      "ReserveProductStockAttributeValueChangeEvent": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          },
          "fieldPath": {
            "type": "string",
            "description": "The path identifying the object field concerned by this notification."
          },
          "event": {
            "$ref": "#/components/schemas/ReserveProductStockAttributeValueChangeEventPayload"
          }
        },
        "description": "The notification data structure"
      },
      "ReserveProductStockAttributeValueChangeEventPayload": {
        "type": "object",
        "properties": {
          "reserveProductStock": {
            "$ref": "#/components/schemas/ReserveProductStock"
          }
        },
        "description": "The event data structure"
      },
      "ReserveProductStockStateChangeEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/ReserveProductStockStateChangeEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "ReserveProductStockStateChangeEventPayload": {
        "type": "object",
        "properties": {
          "reserveProductStock": {
            "$ref": "#/components/schemas/ReserveProductStock"
          }
        },
        "description": "The event data structure"
      },
      "ReserveProductStockBatchEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/ReserveProductStockBatchEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "ReserveProductStockBatchEventPayload": {
        "type": "object",
        "properties": {
          "reserveProductStock": {
            "$ref": "#/components/schemas/ReserveProductStock"
          }
        },
        "description": "The event data structure"
      },
      "QueryProductStockCreateEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/QueryProductStockCreateEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "QueryProductStockCreateEventPayload": {
        "type": "object",
        "properties": {
          "queryProductStock": {
            "$ref": "#/components/schemas/QueryProductStock"
          }
        },
        "description": "The event data structure"
      },
      "QueryProductStockAttributeValueChangeEvent": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          },
          "fieldPath": {
            "type": "string",
            "description": "The path identifying the object field concerned by this notification."
          },
          "event": {
            "$ref": "#/components/schemas/QueryProductStockAttributeValueChangeEventPayload"
          }
        },
        "description": "The notification data structure"
      },
      "QueryProductStockAttributeValueChangeEventPayload": {
        "type": "object",
        "properties": {
          "queryProductStock": {
            "$ref": "#/components/schemas/QueryProductStock"
          }
        },
        "description": "The event data structure"
      },
      "QueryProductStockStateChangeEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/QueryProductStockStateChangeEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "QueryProductStockStateChangeEventPayload": {
        "type": "object",
        "properties": {
          "queryProductStock": {
            "$ref": "#/components/schemas/QueryProductStock"
          }
        },
        "description": "The event data structure"
      },
      "QueryProductStockBatchEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/QueryProductStockBatchEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "QueryProductStockBatchEventPayload": {
        "type": "object",
        "properties": {
          "queryProductStock": {
            "$ref": "#/components/schemas/QueryProductStock"
          }
        },
        "description": "The event data structure"
      },
      "Error": {
        "required": [
          "code",
          "reason"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Application relevant detail, defined in the API or a common list."
          },
          "reason": {
            "type": "string",
            "description": "Explanation of the reason for the error which can be shown to a client user."
          },
          "message": {
            "type": "string",
            "description": "More details and corrective actions related to the error which can be shown to a client user."
          },
          "status": {
            "type": "string",
            "description": "HTTP Error code extension"
          },
          "referenceError": {
            "type": "string",
            "description": "URI of documentation describing the error.",
            "format": "uri"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class."
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name."
          }
        },
        "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
      }
    }
  },
  "x-original-swagger-version": "2.0"
}