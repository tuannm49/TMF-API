openapi: 3.0.1
info:
  title: Payment Method
  description: "TMF670 Defines a specific method of payment (e.g. direct debit with all details associated) -\tMain payment method attributes are its type, details, name, description, isPreffered, status, status date Payment Method API performs the following operations on payment method. -\tRetrieval of a payment method or a collection of payment method depending on filter criteria -\tPartial update of a payment method -\tCreation of a payment method  -\tNotification of events on payment method o\tPayment method state change o\tPayment method change o\tPayment method created o\tPayment method deleted "
  version: 5.0.0
servers:
  - url: 'https://serverRoot'
tags:
  - name: paymentMethod
    description: Operations for PaymentMethod Resource
  - name: notification listener
    description: Notifications for Resource Lifecycle and event notifications
  - name: events subscription
    description: Endpoints to register and terminate an Event Listener
paths:
  /paymentMethod:
    get:
      tags:
        - paymentMethod
      summary: List or find PaymentMethod objects
      description: >-
        This operation retrieves a PaymentMethod entity. Attribute selection enabled for all first
        level attributes.
      operationId: listPaymentMethod
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/200PaymentMethodArray'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
    post:
      tags:
        - paymentMethod
      summary: Creates a PaymentMethod
      description: This operation creates a PaymentMethod entity.
      operationId: createPaymentMethod
      parameters:
        - $ref: '#/components/parameters/Fields'
      requestBody:
        $ref: '#/components/requestBodies/PaymentMethod_FVO'
      responses:
        '201':
          $ref: '#/components/responses/201PaymentMethod'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
  '/paymentMethod/{id}':
    get:
      tags:
        - paymentMethod
      summary: Retrieves a PaymentMethod by ID
      description: List or find PaymentMethod objects
      operationId: retrievePaymentMethod
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/200PaymentMethod_Get'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
    patch:
      tags:
        - paymentMethod
      summary: Updates partially a PaymentMethod
      description: This operation updates partially a PaymentMethod entity.
      operationId: patchPaymentMethod
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/PaymentMethod_MVO'
      responses:
        '200':
          $ref: '#/components/responses/200PaymentMethod_Patch'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
    delete:
      tags:
        - paymentMethod
      summary: Deletes a PaymentMethod
      description: This operation deletes a PaymentMethod entity.
      operationId: deletePaymentMethod
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
  /listener/paymentMethodCreateEvent:
    post:
      tags:
        - notification listener
      summary: Client listener for entity PaymentMethodCreateEvent
      description: Example of a client listener for receiving the notification PaymentMethodCreateEvent
      operationId: paymentMethodCreateEvent
      requestBody:
        $ref: '#/components/requestBodies/PaymentMethodCreateEvent'
      responses:
        '204':
          description: Notified
        default:
          $ref: '#/components/responses/Error'
  /listener/paymentMethodAttributeValueChangeEvent:
    post:
      tags:
        - notification listener
      summary: Client listener for entity PaymentMethodCreateEvent
      description: >-
        Example of a client listener for receiving the notification
        PaymentMethodAttributeValueChangeEvent
      operationId: paymentMethodAttributeValueChangeEvent
      requestBody:
        $ref: '#/components/requestBodies/PaymentMethodAttributeValueChangeEvent'
      responses:
        '204':
          description: Notified
        default:
          $ref: '#/components/responses/Error'
  /listener/paymentMethodStatusChangeEvent:
    post:
      tags:
        - notification listener
      summary: Client listener for entity PaymentMethodCreateEvent
      description: Example of a client listener for receiving the notification PaymentMethodStatusChangeEvent
      operationId: paymentMethodStatusChangeEvent
      requestBody:
        $ref: '#/components/requestBodies/PaymentMethodStatusChangeEvent'
      responses:
        '204':
          description: Notified
        default:
          $ref: '#/components/responses/Error'
  /listener/paymentMethodDeleteEvent:
    post:
      tags:
        - notification listener
      summary: Client listener for entity PaymentMethodCreateEvent
      description: Example of a client listener for receiving the notification PaymentMethodDeleteEvent
      operationId: paymentMethodDeleteEvent
      requestBody:
        $ref: '#/components/requestBodies/PaymentMethodDeleteEvent'
      responses:
        '204':
          description: Notified
        default:
          $ref: '#/components/responses/Error'
  /hub:
    post:
      operationId: createHub
      summary: Create a subscription (hub) to receive Events
      description: Sets the communication endpoint to receive Events.
      tags:
        - events subscription
      requestBody:
        $ref: '#/components/requestBodies/Hub_FVO'
      responses:
        '201':
          $ref: '#/components/responses/Hub'
        default:
          $ref: '#/components/responses/Error'
  '/hub/{id}':
    delete:
      operationId: hubDelete
      summary: Remove a subscription (hub) to receive Events
      description: ''
      tags:
        - events subscription
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          description: Deleted
        default:
          $ref: '#/components/responses/Error'
components:
  schemas:
    AccountPaymentMethod:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          description: Reference an internal account that could be billed directly to perform the payment.
          properties:
            billedAccount:
              $ref: '#/components/schemas/AccountRef'
            '@type':
              type: string
              enum:
                - accountPaymentMethod
    AccountRef:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: Account reference. A account may be a party account or a financial account.
          properties:
            description:
              type: string
              description: Detailed description of the account
            href:
              type: string
              description: Reference of the account
            id:
              type: string
              description: Unique identifier of the account
            name:
              type: string
              description: Name of the account
            '@referredType':
              type: string
              description: The actual type of the target instance when needed for disambiguation.
      discriminator:
        propertyName: '@type'
        mapping:
          AccountRef: '#/components/schemas/AccountRef'
    AccountRef_FVO:
      allOf:
        - $ref: '#/components/schemas/Entity_FVO'
        - type: object
          description: Account reference. A account may be a party account or a financial account.
          properties:
            description:
              type: string
              description: Detailed description of the account
            href:
              type: string
              description: Reference of the account
            id:
              type: string
              description: Unique identifier of the account
            name:
              type: string
              description: Name of the account
            '@referredType':
              type: string
              description: The actual type of the target instance when needed for disambiguation.
      discriminator:
        propertyName: '@type'
        mapping:
          AccountRef: '#/components/schemas/AccountRef_FVO'
    AccountRef_MVO:
      allOf:
        - $ref: '#/components/schemas/Entity_MVO'
        - type: object
          description: Account reference. A account may be a party account or a financial account.
          properties:
            description:
              type: string
              description: Detailed description of the account
            href:
              type: string
              description: Reference of the account
            id:
              type: string
              description: Unique identifier of the account
            name:
              type: string
              description: Name of the account
            '@referredType':
              type: string
              description: The actual type of the target instance when needed for disambiguation.
      discriminator:
        propertyName: '@type'
        mapping:
          AccountRef: '#/components/schemas/AccountRef_MVO'
    Addressable:
      type: object
      description: Base schema for adressable entities
      properties:
        href:
          type: string
          description: Hyperlink reference
        id:
          type: string
          description: unique identifier
      required:
        - id
        - href
    Addressable_FVO:
      type: object
      description: Base schema for adressable entities
      properties:
        id:
          type: string
          description: unique identifier
    Attachment:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: >-
            Complements the description of an element (for instance a product) through video,
            pictures...
          properties:
            attachmentType:
              type: string
              description: 'Attachment type such as video, picture'
            mimeType:
              type: string
              description: 'Attachment mime type such as extension file for video, picture and document'
      discriminator:
        propertyName: '@type'
        mapping:
          Attachment: '#/components/schemas/Attachment'
    AttachmentRef:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - $ref: '#/components/schemas/EntityRef'
        - $ref: '#/components/schemas/Reference'
        - type: object
          description: >-
            Attachment reference. An attachment complements the description of an element (for
            instance a product) through video, pictures
          properties:
            description:
              type: string
              description: A narrative text describing the content of the attachment
            url:
              description: Link to the attachment media/content
              type: string
      discriminator:
        propertyName: '@type'
        mapping:
          AttachmentRef: '#/components/schemas/AttachmentRef'
    AttachmentRefOrValue:
      type: object
      description: >-
        An attachment by value or by reference. An attachment complements the description of an
        element, for example through a document, a video, a picture.
      oneOf:
        - $ref: '#/components/schemas/AttachmentRef'
        - $ref: '#/components/schemas/AttachmentValue'
      discriminator:
        propertyName: '@type'
        mapping:
          AttachmentRef: '#/components/schemas/AttachmentRef'
          Attachment: '#/components/schemas/AttachmentValue'
    AttachmentRef_FVO:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - $ref: '#/components/schemas/EntityRef'
        - $ref: '#/components/schemas/Reference_FVO'
        - type: object
          description: >-
            Attachment reference. An attachment complements the description of an element (for
            instance a product) through video, pictures
          properties:
            description:
              type: string
              description: A narrative text describing the content of the attachment
            url:
              description: Link to the attachment media/content
              type: string
      discriminator:
        propertyName: '@type'
        mapping:
          AttachmentRef: '#/components/schemas/AttachmentRef_FVO'
    AttachmentRef_MVO:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - $ref: '#/components/schemas/EntityRef'
        - $ref: '#/components/schemas/Reference_MVO'
        - type: object
          description: >-
            Attachment reference. An attachment complements the description of an element (for
            instance a product) through video, pictures
          properties:
            description:
              type: string
              description: A narrative text describing the content of the attachment
            url:
              description: Link to the attachment media/content
              type: string
      discriminator:
        propertyName: '@type'
        mapping:
          AttachmentRef: '#/components/schemas/AttachmentRef_MVO'
    AttachmentValue:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: >-
            Complements the description of an element (for instance a product) through video,
            pictures...
          properties:
            href:
              type: string
              description: Hyperlink reference
            id:
              type: string
              description: unique identifier
            name:
              type: string
              description: The name of the attachment
            description:
              type: string
              description: A narrative text describing the content of the attachment
              example: Photograph of the Product
            url:
              type: string
              description: 'Uniform Resource Locator, is a web page address (a subset of URI)'
              example: 'http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f'
            content:
              type: string
              format: base64
              description: 'The actual contents of the attachment object, if embedded, encoded as base64'
            size:
              $ref: '#/components/schemas/Quantity'
            validFor:
              $ref: '#/components/schemas/TimePeriod'
            attachmentType:
              type: string
              description: 'Attachment type such as video, picture'
            mimeType:
              type: string
              description: 'Attachment mime type such as extension file for video, picture and document'
      discriminator:
        propertyName: '@type'
        mapping:
          Attachment: '#/components/schemas/AttachmentValue'
    AttachmentValue_FVO:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: >-
            Complements the description of an element (for instance a product) through video,
            pictures...
          properties:
            href:
              type: string
              description: Hyperlink reference
            id:
              type: string
              description: unique identifier
            name:
              type: string
              description: The name of the attachment
            description:
              type: string
              description: A narrative text describing the content of the attachment
              example: Photograph of the Product
            url:
              type: string
              description: 'Uniform Resource Locator, is a web page address (a subset of URI)'
              example: 'http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f'
            content:
              type: string
              format: base64
              description: 'The actual contents of the attachment object, if embedded, encoded as base64'
            size:
              $ref: '#/components/schemas/Quantity'
            validFor:
              $ref: '#/components/schemas/TimePeriod'
            attachmentType:
              type: string
              description: 'Attachment type such as video, picture'
            mimeType:
              type: string
              description: 'Attachment mime type such as extension file for video, picture and document'
      discriminator:
        propertyName: '@type'
        mapping:
          Attachment: '#/components/schemas/AttachmentValue_FVO'
    AttachmentValue_MVO:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: >-
            Complements the description of an element (for instance a product) through video,
            pictures...
          properties:
            href:
              type: string
              description: Hyperlink reference
            id:
              type: string
              description: unique identifier
            name:
              type: string
              description: The name of the attachment
            description:
              type: string
              description: A narrative text describing the content of the attachment
              example: Photograph of the Product
            url:
              type: string
              description: 'Uniform Resource Locator, is a web page address (a subset of URI)'
              example: 'http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f'
            content:
              type: string
              format: base64
              description: 'The actual contents of the attachment object, if embedded, encoded as base64'
            size:
              $ref: '#/components/schemas/Quantity'
            validFor:
              $ref: '#/components/schemas/TimePeriod'
            attachmentType:
              type: string
              description: 'Attachment type such as video, picture'
            mimeType:
              type: string
              description: 'Attachment mime type such as extension file for video, picture and document'
      discriminator:
        propertyName: '@type'
        mapping:
          Attachment: '#/components/schemas/AttachmentValue_MVO'
    Attachment_FVO:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: >-
            Complements the description of an element (for instance a product) through video,
            pictures...
          properties:
            attachmentType:
              type: string
              description: 'Attachment type such as video, picture'
            mimeType:
              type: string
              description: 'Attachment mime type such as extension file for video, picture and document'
          required:
            - attachmentType
            - mimeType
      discriminator:
        propertyName: '@type'
        mapping:
          Attachment: '#/components/schemas/Attachment_FVO'
    Attachment_MVO:
      allOf:
        - $ref: '#/components/schemas/Entity_MVO'
        - type: object
          description: >-
            Complements the description of an element (for instance a product) through video,
            pictures...
          properties:
            attachmentType:
              type: string
              description: 'Attachment type such as video, picture'
            mimeType:
              type: string
              description: 'Attachment mime type such as extension file for video, picture and document'
          required:
            - attachmentType
            - mimeType
      discriminator:
        propertyName: '@type'
        mapping:
          Attachment: '#/components/schemas/Attachment_MVO'
    BankAccountDebit:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          description: >-
            A bank account debit method of payment. This could be extended to add any required
            authorization fields to allow recurring payments
          properties:
            accountNumberType:
              type: string
              description: 'The type of account number (e.g.: IBAN, SWIFT, ...)'
              example: IBAN
            BIC:
              type: string
              description: >-
                The Business Identifier Code/Swift code of the financial institution where the
                account is located.
              example: NATWEST74GB
            accountNumber:
              type: string
              description: The Bank Account Number (this could refer to the IBAN or SWIFT number)
              example: GB74NATWEST122337754838313
            owner:
              type: string
              description: The owner of the bank account. This is also the account name.
              example: Dominic Oyeniran
            bank:
              type: string
              description: The display name of the bank.
              example: Natwest Bank Limited.
            '@type':
              type: string
              enum:
                - bankAccountDebit
    BankAccountTransfer:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          description: A bank transfer method of payment.
          properties:
            accountNumberType:
              type: string
              description: 'The type of account number (e.g.: IBAN, SWIFT, ...)'
              example: IBAN
            BIC:
              type: string
              description: >-
                The Business Identifier Code/Swift code of the financial institution where the
                account is located.
              example: HBUKGB4BXXX
            accountNumber:
              type: string
              description: 'The bank account number, this could refer to the iban or swift number.'
              example: GB74HSBCUK122337754838313
            owner:
              type: string
              description: The owner of the bank account. This is also the account name.
              example: Dom Joe Plumbing Ltd
            bank:
              type: string
              description: The display name of the bank.
              example: HSBC BANK UK
            '@type':
              type: string
              enum:
                - bankAccountTransfer
    BankCard:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          description: A bank card method of payment.
          properties:
            cardType:
              type: string
              description: 'The type of card e.g. Credit, debit etc.'
              example: Credit
            cvv:
              type: string
              description: 'The security code (e.g.: CVV, CVV2) of the card.'
              example: '123'
            lastFourDigits:
              type: string
              description: The last four digits of the credit card.
              example: '0000'
            bank:
              type: string
              description: The bank that issued the card.
              example: Your Bank Inc.
            brand:
              type: string
              description: The card brand
              example: Visa
            cardNumber:
              type: string
              description: The bank card number.
              example: 0000-0000-0000-0000
            expirationDate:
              type: string
              description: Expiration date of the bank card.
              format: date-time
              example: '2025-11-20T10:19:46+0000'
            nameOnCard:
              type: string
              description: The name on the card.
              example: Abbey S King.
            '@type':
              type: string
              enum:
                - bankCard
    BaseEvent:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: Base event with common attributes.
          properties:
            event:
              type: object
            eventId:
              type: string
              description: The identifier of the notification.
            eventTime:
              type: string
              format: date-time
              description: Time of the event occurrence.
            eventType:
              type: string
              description: The type of the notification.
            correlationId:
              type: string
              description: The correlation id for this event.
            domain:
              type: string
              description: The domain of the event.
            title:
              type: string
              description: The title of the event.
            description:
              type: string
              description: An explanatory of the event.
            priority:
              type: string
              description: A priority.
            timeOcurred:
              type: string
              format: date-time
              description: The time the event occured.
      discriminator:
        propertyName: '@type'
        mapping:
          BaseEvent: '#/components/schemas/BaseEvent'
    BaseEvent_FVO:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: Base event with common attributes.
          properties:
            event:
              type: object
            eventId:
              type: string
              description: The identifier of the notification.
            eventTime:
              type: string
              format: date-time
              description: Time of the event occurrence.
            eventType:
              type: string
              description: The type of the notification.
            correlationId:
              type: string
              description: The correlation id for this event.
            domain:
              type: string
              description: The domain of the event.
            title:
              type: string
              description: The title of the event.
            description:
              type: string
              description: An explanatory of the event.
            priority:
              type: string
              description: A priority.
            timeOcurred:
              type: string
              format: date-time
              description: The time the event occured.
      discriminator:
        propertyName: '@type'
        mapping:
          BaseEvent: '#/components/schemas/BaseEvent_FVO'
    BaseEvent_MVO:
      allOf:
        - $ref: '#/components/schemas/Entity_MVO'
        - type: object
          description: Base event with common attributes.
          properties:
            event:
              type: object
            eventId:
              type: string
              description: The identifier of the notification.
            eventTime:
              type: string
              format: date-time
              description: Time of the event occurrence.
            eventType:
              type: string
              description: The type of the notification.
            correlationId:
              type: string
              description: The correlation id for this event.
            domain:
              type: string
              description: The domain of the event.
            title:
              type: string
              description: The title of the event.
            description:
              type: string
              description: An explanatory of the event.
            priority:
              type: string
              description: A priority.
            timeOcurred:
              type: string
              format: date-time
              description: The time the event occured.
      discriminator:
        propertyName: '@type'
        mapping:
          BaseEvent: '#/components/schemas/BaseEvent_MVO'
    BucketRef:
      allOf:
        - $ref: '#/components/schemas/EntityRef'
        - $ref: '#/components/schemas/Reference'
        - type: object
          description: link to the resource that holds bucket information
          properties:
            usageType:
              type: string
              description: >-
                defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD
                etc
    BucketRef_FVO:
      allOf:
        - $ref: '#/components/schemas/EntityRef'
        - $ref: '#/components/schemas/Reference_FVO'
        - type: object
          description: link to the resource that holds bucket information
          properties:
            usageType:
              type: string
              description: >-
                defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD
                etc
    BucketRef_MVO:
      allOf:
        - $ref: '#/components/schemas/EntityRef'
        - $ref: '#/components/schemas/Reference_MVO'
        - type: object
          description: link to the resource that holds bucket information
          properties:
            usageType:
              type: string
              description: >-
                defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD
                etc
    Cash:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          description: >-
            Reference to a bucket that could be used to perform the payment, especially in the
            pre-paid environment.
          properties:
            bucket:
              $ref: '#/components/schemas/BucketRef'
            '@type':
              type: string
              enum:
                - bucketPaymentMethod
    Characteristic:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: Describes a given characteristic of an object or entity through a name/value pair.
          properties:
            id:
              type: string
              description: Unique identifier of the characteristic
            valueType:
              type: string
              description: Data type of the value of the characteristic
            characteristicRelationship:
              type: array
              items:
                $ref: '#/components/schemas/CharacteristicRelationship'
            name:
              type: string
              description: Name of the characteristic
      discriminator:
        propertyName: '@type'
        mapping:
          Characteristic: '#/components/schemas/Characteristic'
    CharacteristicRelationship:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: Another Characteristic that is related to the current Characteristic;
          properties:
            id:
              type: string
              description: Unique identifier of the characteristic
            relationshipType:
              type: string
              description: The type of relationship
      discriminator:
        propertyName: '@type'
        mapping:
          CharacteristicRelationship: '#/components/schemas/CharacteristicRelationship'
    CharacteristicRelationship_FVO:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: Another Characteristic that is related to the current Characteristic;
          properties:
            id:
              type: string
              description: Unique identifier of the characteristic
            relationshipType:
              type: string
              description: The type of relationship
      discriminator:
        propertyName: '@type'
        mapping:
          CharacteristicRelationship: '#/components/schemas/CharacteristicRelationship_FVO'
    CharacteristicRelationship_MVO:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: Another Characteristic that is related to the current Characteristic;
          properties:
            id:
              type: string
              description: Unique identifier of the characteristic
            relationshipType:
              type: string
              description: The type of relationship
      discriminator:
        propertyName: '@type'
        mapping:
          CharacteristicRelationship: '#/components/schemas/CharacteristicRelationship_MVO'
    Characteristic_FVO:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: Describes a given characteristic of an object or entity through a name/value pair.
          properties:
            id:
              type: string
              description: Unique identifier of the characteristic
            valueType:
              type: string
              description: Data type of the value of the characteristic
            characteristicRelationship:
              type: array
              items:
                $ref: '#/components/schemas/CharacteristicRelationship'
            name:
              type: string
              description: Name of the characteristic
      discriminator:
        propertyName: '@type'
        mapping:
          Characteristic: '#/components/schemas/Characteristic_FVO'
    Characteristic_MVO:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: Describes a given characteristic of an object or entity through a name/value pair.
          properties:
            id:
              type: string
              description: Unique identifier of the characteristic
            valueType:
              type: string
              description: Data type of the value of the characteristic
            characteristicRelationship:
              type: array
              items:
                $ref: '#/components/schemas/CharacteristicRelationship'
            name:
              type: string
              description: Name of the characteristic
      discriminator:
        propertyName: '@type'
        mapping:
          Characteristic: '#/components/schemas/Characteristic_MVO'
    Check:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          description: A check method of payment.
          properties:
            checkId:
              type: string
              description: Unique identifier of the check.
              example: 02598636
            drawer:
              type: string
              description: Person or entity writing the check.
              example: A.D Oyeniran
            payee:
              type: string
              description: Person or entity the check is addressed to.
              example: Steve Harrop
            signedDate:
              type: string
              description: Date when the check was signed.
              format: date-time
              example: '2021-11-20T10:19:46+0000'
            bank:
              type: string
              description: Bank performing the payment of the check.
              example: Barclays Bank.
            '@type':
              type: string
              enum:
                - check
    DigitalWallet:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          description: A digital wallet method of payment.
          properties:
            service:
              type: string
              description: >-
                Organization, platform or currency backing the wallet (e.g.: PayPal, Yandex,
                BitCoin…).
              example: PayPal
            walletId:
              type: string
              description: Account identifier in that service.
              example: '#124#XTYC#7N4LK-12'
            walletUrl:
              type: string
              description: 'URI pointing at the digital wallet (e.g.: //paypal.me/johndoe).'
              example: //paypal.me/johndoe
            '@type':
              type: string
              enum:
                - digitalWallet
    DirectDebit:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          description: >-
            Direct Debit is a fully automated payment instrument which is generally used for
            recurrent payments. It allows a creditor to initiate the payment order. In doing so, it
            exempts the debtor from having to send a separate payment order at each due date
          properties:
            mandateId:
              type: string
              description: Unique mandate reference. Further information can be found on EPC002-09
              example: M-123456789-A79ZH34KJZ
            mandateStatus:
              type: string
              description: The status of the mandate(Active/Inactive/Pending)
              example: Active
            mandateType:
              type: string
              description: The type of mandate
              example: single
            mandateCategory:
              type: string
              description: The identification code of the Scheme
              example: core
            signature:
              type: string
              description: The (e)Mandate electronic signature data
            signatureDate:
              type: string
              description: The date of signing of the (e)Mandate
              format: date-time
              example: '2021-11-20T10:19:46+0000'
            mandateStatusDate:
              type: string
              description: The date of the mandate status change
              format: date-time
              example: '2021-11-20T10:19:46+0000'
            firstDebitDate:
              type: string
              description: >-
                The first debit date. The debit date of the collection is the day when the payment
                of the Debtor is due to the Creditor
              format: date-time
              example: '2021-11-20T10:20:00+0000'
            lastDebitDate:
              type: string
              description: >-
                The last debit date. The debit date of the collection is the day when the payment of
                the Debtor is due to the Creditor
              format: date-time
              example: '2021-11-20T10:20:00+0000'
            cancellationDate:
              type: string
              description: The date on which the (e)Mandate has been cancelled by the Debtor or the Creditor.
              format: date-time
              example: '2021-11-20T10:20:00+0000'
            accountNumber:
              type: string
              description: 'The bank account number, this could refer to the iban or swift number.'
              example: GB74HSBCUK122232323238313
            accountNumberType:
              type: string
              description: 'The type of account number (e.g.: IBAN, SWIFT, ...)'
              example: IBAN
            reference:
              type: string
              description: A reference that the party can later use to identify the direct debit.
              example: Telco Bill Direct Debit
            BIC:
              type: string
              description: >-
                The Business Identifier Code/Swift code of the financial institution where the
                account is located.
              example: HBUKGB4BXXX
            owner:
              type: string
              description: The owner of the bank account. This is also the account name.
              example: Dominic Joe Plumbing Ltd
            bank:
              type: string
              description: The display name of the bank.
              example: LOCAL BANK
            attachment:
              type: array
              items:
                $ref: '#/components/schemas/AttachmentRefOrValue'
            '@type':
              type: string
              enum:
                - directDebit
    Entity:
      type: object
      description: Base entity schema for use in TMForum Open-APIs. Property.
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - $ref: '#/components/schemas/Addressable'
    EntityRef:
      type: object
      description: Entity reference schema to be use for all entityRef class.
      properties:
        href:
          type: string
          description: Hyperlink reference
    Entity_FVO:
      type: object
      description: Base entity schema for use in TMForum Open-APIs. Property.
      allOf:
        - $ref: '#/components/schemas/Extensible_FVO'
        - $ref: '#/components/schemas/Addressable_FVO'
    Entity_MVO:
      type: object
      description: Base entity schema for use in TMForum Open-APIs. Property.
      allOf:
        - $ref: '#/components/schemas/Extensible'
    Event:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: event with common attributes.
          properties:
            href:
              type: string
              description: Hyperlink reference
            id:
              type: string
              description: unique identifier
            correlationId:
              type: string
              description: The correlation id for this event.
            domain:
              type: string
              description: The domain of the event.
            title:
              type: string
              description: The title of the event.
            description:
              type: string
              description: An explnatory of the event.
            priority:
              type: string
              description: A priority.
            timeOccurred:
              type: string
              format: date-time
              description: The time the event occurred.
            source:
              $ref: '#/components/schemas/EntityRef'
            reportingSystem:
              $ref: '#/components/schemas/EntityRef'
            relatedParty:
              type: array
              items:
                $ref: '#/components/schemas/RelatedParty'
            analyticCharacteristic:
              type: array
              items:
                $ref: '#/components/schemas/Characteristic'
            eventId:
              type: string
              description: The identifier of the notification.
            eventTime:
              type: string
              format: date-time
              description: Time of the event occurrence.
            eventType:
              type: string
              description: The type of the notification.
            event:
              description: The event linked to the involved resource object
              type: object
    Event_FVO:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: event with common attributes.
          properties:
            href:
              type: string
              description: Hyperlink reference
            id:
              type: string
              description: unique identifier
            correlationId:
              type: string
              description: The correlation id for this event.
            domain:
              type: string
              description: The domain of the event.
            title:
              type: string
              description: The title of the event.
            description:
              type: string
              description: An explnatory of the event.
            priority:
              type: string
              description: A priority.
            timeOccurred:
              type: string
              format: date-time
              description: The time the event occurred.
            source:
              $ref: '#/components/schemas/EntityRef'
            reportingSystem:
              $ref: '#/components/schemas/EntityRef'
            relatedParty:
              type: array
              items:
                $ref: '#/components/schemas/RelatedParty_FVO'
            analyticCharacteristic:
              type: array
              items:
                $ref: '#/components/schemas/Characteristic'
            eventId:
              type: string
              description: The identifier of the notification.
            eventTime:
              type: string
              format: date-time
              description: Time of the event occurrence.
            eventType:
              type: string
              description: The type of the notification.
            event:
              description: The event linked to the involved resource object
              type: object
    Event_MVO:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: event with common attributes.
          properties:
            href:
              type: string
              description: Hyperlink reference
            id:
              type: string
              description: unique identifier
            correlationId:
              type: string
              description: The correlation id for this event.
            domain:
              type: string
              description: The domain of the event.
            title:
              type: string
              description: The title of the event.
            description:
              type: string
              description: An explnatory of the event.
            priority:
              type: string
              description: A priority.
            timeOccurred:
              type: string
              format: date-time
              description: The time the event occurred.
            source:
              $ref: '#/components/schemas/EntityRef'
            reportingSystem:
              $ref: '#/components/schemas/EntityRef'
            relatedParty:
              type: array
              items:
                $ref: '#/components/schemas/RelatedParty_MVO'
            analyticCharacteristic:
              type: array
              items:
                $ref: '#/components/schemas/Characteristic'
            eventId:
              type: string
              description: The identifier of the notification.
            eventTime:
              type: string
              format: date-time
              description: Time of the event occurrence.
            eventType:
              type: string
              description: The type of the notification.
            event:
              description: The event linked to the involved resource object
              type: object
    Extensible:
      type: object
      description: >-
        Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means
        that the Entity described by the schema  MUST be extended with the @type
      properties:
        '@type':
          type: string
          description: 'When sub-classing, this defines the sub-class Extensible name'
        '@baseType':
          type: string
          description: 'When sub-classing, this defines the super-class'
        '@schemaLocation':
          type: string
          description: A URI to a JSON-Schema file that defines additional attributes and relationships
      required:
        - '@type'
    Extensible_FVO:
      type: object
      description: >-
        Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means
        that the Entity described by the schema  MUST be extended with the @type
      properties:
        '@type':
          type: string
          description: 'When sub-classing, this defines the sub-class Extensible name'
        '@baseType':
          type: string
          description: 'When sub-classing, this defines the super-class'
        '@schemaLocation':
          type: string
          description: A URI to a JSON-Schema file that defines additional attributes and relationships
      required:
        - '@type'
    LoyaltyAccountRef:
      type: object
      description: Reference to a loyalty account.
      allOf:
        - $ref: '#/components/schemas/EntityRef'
    LoyaltyAccountRef_FVO:
      type: object
      description: Reference to a loyalty account.
      allOf:
        - $ref: '#/components/schemas/EntityRef'
    LoyaltyAccountRef_MVO:
      type: object
      description: Reference to a loyalty account.
      allOf:
        - $ref: '#/components/schemas/EntityRef'
    LoyaltyPaymentMethod:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          description: Reference to an account in a loyalty system that could be used to perform the payment.
          properties:
            loyaltyAccount:
              $ref: '#/components/schemas/LoyaltyAccountRef'
            '@type':
              type: string
              enum:
                - loyaltyPaymentMethod
    PaymentMethod:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: >-
            A Payment Method is a pure-virtual super-class that defines a specific method of payment
            such as Direct Debit, Cash, Digital Wallet,Tokenized Card, Bank Account Transfer, Bank
            Account Debit, Bank Card, Voucher, Check, Bucket PaymentMethod, Account PaymentMethod,
            and Loyalty PaymentMethod with all details associated. Use the @type attribute to
            specify the concrete type in the API calls.
          properties:
            description:
              type: string
              description: Text description of the contents of the payment method
              example: My gold mastercard.
            isPreferred:
              type: boolean
              description: >-
                If the method is the preferred one by the owner. Typically used when querying for
                the payment methods of a specific customer or account
              example: 'True'
            authorizationCode:
              type: string
              description: >-
                Review: Authorization code provided by a financial institution. Typically this would
                be populated for recurring payments using the method, as payments have an
                authorization code of their own.
              example: '1234567890'
            status:
              type: string
              description: Status of the payment method
              example: Active
            statusDate:
              type: string
              format: date-time
              description: The last time the payment method status changed.
              example: '2020-07-17T10:12:26+0000'
            statusReason:
              type: string
              description: The reason for the last status change.
              example: 'This payment method has expired, therefore its status is now inactive.'
            validFor:
              $ref: '#/components/schemas/TimePeriod'
            relatedParty:
              $ref: '#/components/schemas/RelatedParty'
            relatedPlace:
              $ref: '#/components/schemas/RelatedPlace'
            account:
              type: array
              items:
                $ref: '#/components/schemas/AccountRef'
              description: >-
                Reference to the accounts that are linked to the payment method. May be a party
                account or a financial account.
            name:
              type: string
              description: Friendly name assigned to the payment method
              example: Main credit card
            '@type':
              type: string
              enum:
                - cash
                - digitalWallet
                - tokenizedCard
                - bankAccountTransfer
                - bankAccountDebit
                - bankCard
                - voucher
                - check
                - bucketPaymentMethod
                - accountPaymentMethod
                - loyaltyPaymentMethod
                - directDebit
              description: 'Type of payment method (e.g.: bank card, cash, voucher, etc).'
      discriminator:
        propertyName: '@type'
        mapping:
          PaymentMethod: '#/components/schemas/PaymentMethod'
          Voucher: '#/components/schemas/Voucher'
          TokenizedCard: '#/components/schemas/TokenizedCard'
          LoyaltyPaymentMethod: '#/components/schemas/LoyaltyPaymentMethod'
          DirectDebit: '#/components/schemas/DirectDebit'
          DigitalWallet: '#/components/schemas/DigitalWallet'
          Check: '#/components/schemas/Check'
          Cash: '#/components/schemas/Cash'
          BankCard: '#/components/schemas/BankCard'
          BankAccountTransfer: '#/components/schemas/BankAccountTransfer'
          BankAccountDebit: '#/components/schemas/BankAccountDebit'
    PaymentMethodAttributeValueChangeEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          description: PaymentMethodAttributeValueChangeEvent generic structure
          properties:
            event:
              $ref: '#/components/schemas/PaymentMethodAttributeValueChangeEventPayload'
      discriminator:
        propertyName: '@type'
        mapping:
          PaymentMethodAttributeValueChangeEvent: '#/components/schemas/PaymentMethodAttributeValueChangeEvent'
    PaymentMethodAttributeValueChangeEventPayload:
      type: object
      description: PaymentMethodAttributeValueChangeEventPayload generic structure
      properties:
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
    PaymentMethodCreateEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          description: PaymentMethodCreateEvent generic structure
          properties:
            event:
              $ref: '#/components/schemas/PaymentMethodCreateEventPayload'
      discriminator:
        propertyName: '@type'
        mapping:
          PaymentMethodCreateEvent: '#/components/schemas/PaymentMethodCreateEvent'
    PaymentMethodCreateEventPayload:
      type: object
      description: PaymentMethodCreateEventPayload generic structure
      properties:
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
    PaymentMethodDeleteEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          description: PaymentMethodDeleteEvent generic structure
          properties:
            event:
              $ref: '#/components/schemas/PaymentMethodDeleteEventPayload'
      discriminator:
        propertyName: '@type'
        mapping:
          PaymentMethodDeleteEvent: '#/components/schemas/PaymentMethodDeleteEvent'
    PaymentMethodDeleteEventPayload:
      type: object
      description: PaymentMethodDeleteEventPayload generic structure
      properties:
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
    PaymentMethodStatusChange:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          description: PaymentMethodStatusChange generic structure
          properties:
            event:
              $ref: '#/components/schemas/PaymentMethodStatusChangePayload'
      discriminator:
        propertyName: '@type'
        mapping:
          PaymentMethodStatusChange: '#/components/schemas/PaymentMethodStatusChange'
    PaymentMethodStatusChangePayload:
      type: object
      description: PaymentMethodStatusChangePayload generic structure
      properties:
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
    PaymentMethod_FVO:
      allOf:
        - $ref: '#/components/schemas/Entity_FVO'
        - type: object
          description: >-
            A Payment Method is a pure-virtual super-class that defines a specific method of payment
            such as Direct Debit, Cash, Digital Wallet,Tokenized Card, Bank Account Transfer, Bank
            Account Debit, Bank Card, Voucher, Check, Bucket PaymentMethod, Account PaymentMethod,
            and Loyalty PaymentMethod with all details associated. Use the @type attribute to
            specify the concrete type in the API calls.
          properties:
            description:
              type: string
              description: Text description of the contents of the payment method
              example: My gold mastercard.
            isPreferred:
              type: boolean
              description: >-
                If the method is the preferred one by the owner. Typically used when querying for
                the payment methods of a specific customer or account
              example: 'True'
            authorizationCode:
              type: string
              description: >-
                Review: Authorization code provided by a financial institution. Typically this would
                be populated for recurring payments using the method, as payments have an
                authorization code of their own.
              example: '1234567890'
            status:
              type: string
              description: Status of the payment method
              example: Active
            statusDate:
              type: string
              format: date-time
              description: The last time the payment method status changed.
              example: '2020-07-17T10:12:26+0000'
            statusReason:
              type: string
              description: The reason for the last status change.
              example: 'This payment method has expired, therefore its status is now inactive.'
            validFor:
              $ref: '#/components/schemas/TimePeriod'
            relatedParty:
              $ref: '#/components/schemas/RelatedParty_FVO'
            relatedPlace:
              $ref: '#/components/schemas/RelatedPlace'
            account:
              type: array
              items:
                $ref: '#/components/schemas/AccountRef_FVO'
              description: >-
                Reference to the accounts that are linked to the payment method. May be a party
                account or a financial account.
            name:
              type: string
              description: Friendly name assigned to the payment method
              example: Main credit card
            '@type':
              type: string
              enum:
                - cash
                - digitalWallet
                - tokenizedCard
                - bankAccountTransfer
                - bankAccountDebit
                - bankCard
                - voucher
                - check
                - bucketPaymentMethod
                - accountPaymentMethod
                - loyaltyPaymentMethod
                - directDebit
              description: 'Type of payment method (e.g.: bank card, cash, voucher, etc).'
      discriminator:
        propertyName: '@type'
        mapping:
          PaymentMethod: '#/components/schemas/PaymentMethod_FVO'
    PaymentMethod_MVO:
      allOf:
        - $ref: '#/components/schemas/Entity_MVO'
        - type: object
          description: >-
            A Payment Method is a pure-virtual super-class that defines a specific method of payment
            such as Direct Debit, Cash, Digital Wallet,Tokenized Card, Bank Account Transfer, Bank
            Account Debit, Bank Card, Voucher, Check, Bucket PaymentMethod, Account PaymentMethod,
            and Loyalty PaymentMethod with all details associated. Use the @type attribute to
            specify the concrete type in the API calls.
          properties:
            description:
              type: string
              description: Text description of the contents of the payment method
              example: My gold mastercard.
            isPreferred:
              type: boolean
              description: >-
                If the method is the preferred one by the owner. Typically used when querying for
                the payment methods of a specific customer or account
              example: 'True'
            authorizationCode:
              type: string
              description: >-
                Review: Authorization code provided by a financial institution. Typically this would
                be populated for recurring payments using the method, as payments have an
                authorization code of their own.
              example: '1234567890'
            status:
              type: string
              description: Status of the payment method
              example: Active
            statusDate:
              type: string
              format: date-time
              description: The last time the payment method status changed.
              example: '2020-07-17T10:12:26+0000'
            statusReason:
              type: string
              description: The reason for the last status change.
              example: 'This payment method has expired, therefore its status is now inactive.'
            validFor:
              $ref: '#/components/schemas/TimePeriod'
            relatedParty:
              $ref: '#/components/schemas/RelatedParty_MVO'
            relatedPlace:
              $ref: '#/components/schemas/RelatedPlace_MVO'
            account:
              type: array
              items:
                $ref: '#/components/schemas/AccountRef_MVO'
              description: >-
                Reference to the accounts that are linked to the payment method. May be a party
                account or a financial account.
            name:
              type: string
              description: Friendly name assigned to the payment method
              example: Main credit card
            '@type':
              type: string
              enum:
                - cash
                - digitalWallet
                - tokenizedCard
                - bankAccountTransfer
                - bankAccountDebit
                - bankCard
                - voucher
                - check
                - bucketPaymentMethod
                - accountPaymentMethod
                - loyaltyPaymentMethod
                - directDebit
              description: 'Type of payment method (e.g.: bank card, cash, voucher, etc).'
      discriminator:
        propertyName: '@type'
        mapping:
          PaymentMethod: '#/components/schemas/PaymentMethod_MVO'
    Quantity:
      type: object
      description: An amount in a given unit
      properties:
        amount:
          type: number
          format: float
          default: 1
          description: Numeric value in a given unit
        units:
          type: string
          description: Unit
    Reference:
      type: object
      description: Reference schema .
      properties:
        id:
          type: string
          description: Identifier of the referred entity.
        name:
          type: string
          description: Name of the referred entity.
        '@referredType':
          type: string
          description: The actual type of the target instance when needed for disambiguation.
      required:
        - id
    Reference_FVO:
      type: object
      description: Reference schema .
      properties:
        id:
          type: string
          description: Identifier of the referred entity.
        name:
          type: string
          description: Name of the referred entity.
        '@referredType':
          type: string
          description: The actual type of the target instance when needed for disambiguation.
      required:
        - id
    Reference_MVO:
      type: object
      description: Reference schema .
      properties:
        id:
          type: string
          description: Identifier of the referred entity.
        name:
          type: string
          description: Name of the referred entity.
        '@referredType':
          type: string
          description: The actual type of the target instance when needed for disambiguation.
    RelatedParty:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - $ref: '#/components/schemas/EntityRef'
        - $ref: '#/components/schemas/Reference'
        - type: object
          description: Related Entity reference. A related party defines party linked to a specific entity.
          properties:
            role:
              type: string
              description: Role played by the related party
      discriminator:
        propertyName: '@type'
        mapping:
          RelatedParty: '#/components/schemas/RelatedParty'
    RelatedParty_FVO:
      allOf:
        - $ref: '#/components/schemas/Extensible_FVO'
        - $ref: '#/components/schemas/EntityRef'
        - $ref: '#/components/schemas/Reference_FVO'
        - type: object
          description: Related Entity reference. A related party defines party linked to a specific entity.
          properties:
            role:
              type: string
              description: Role played by the related party
          required:
            - '@referredType'
            - role
      discriminator:
        propertyName: '@type'
        mapping:
          RelatedParty: '#/components/schemas/RelatedParty_FVO'
    RelatedParty_MVO:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - $ref: '#/components/schemas/EntityRef'
        - $ref: '#/components/schemas/Reference_MVO'
        - type: object
          description: Related Entity reference. A related party defines party linked to a specific entity.
          properties:
            role:
              type: string
              description: Role played by the related party
      discriminator:
        propertyName: '@type'
        mapping:
          RelatedParty: '#/components/schemas/RelatedParty_MVO'
    RelatedPlace:
      allOf:
        - $ref: '#/components/schemas/EntityRef'
        - type: object
          description: 'A  Place and an associated role as installation adress, delivery address, etc....'
          properties:
            name:
              type: string
              description: >-
                A user-friendly name for the place, such as [Paris Store], [London Store], [Main
                Home]
            role:
              type: string
              description: 'Role of the place, such as: [home delivery], [shop retrieval])'
    RelatedPlace_MVO:
      allOf:
        - $ref: '#/components/schemas/EntityRef'
        - type: object
          description: 'A  Place and an associated role as installation adress, delivery address, etc....'
          properties:
            name:
              type: string
              description: >-
                A user-friendly name for the place, such as [Paris Store], [London Store], [Main
                Home]
            role:
              type: string
              description: 'Role of the place, such as: [home delivery], [shop retrieval])'
    TimePeriod:
      type: object
      description: 'A period of time, either as a deadline (endDateTime only) a startDateTime only, or both'
      properties:
        startDateTime:
          description: 'Start of the time period, using IETC-RFC-3339 format'
          type: string
          format: date-time
          example: '1985-04-12T23:20:50.52Z'
        endDateTime:
          description: 'End of the time period, using IETC-RFC-3339 format'
          type: string
          format: date-time
          example: '1985-04-12T23:20:50.52Z'
    TokenizedCard:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          description: A Tokenized Card method of payment.
          properties:
            brand:
              type: string
              description: Card brand. Might be used for display purposes
              example: Visa
            cardType:
              type: string
              description: Card type. Might be used for display purposes.
              example: Credit
            lastFourDigits:
              type: string
              description: The last four digits of the credit card.
              example: '0000'
            tokenType:
              type: string
              description: 'Token type (e.g.: emv).'
              example: emv
            token:
              type: string
              description: The token. A series of randomly generated numbers.
            issuer:
              type: string
              description: The entity that issued the token.
              example: Visa
            expirationDate:
              type: string
              description: The tokenised card's expiration date.
              format: date-time
              example: '2025-11-20T10:19:46+0000'
            countryOfIssue:
              type: string
              description: >-
                ISO 3166-1 Alpha-2 country code that designate the country where the tokenised card
                was issued.e.g. GB, NG, FR.
              example: GB
            '@type':
              type: string
              enum:
                - tokenizedCard
    Voucher:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          description: A voucher method of payment.
          properties:
            code:
              type: string
              description: Code that identifies the voucher.
              example: VCJLP0000
            description:
              type: string
              description: 'Description of the voucher i.e.: get one and receive one free.'
              example: Buy one and receive one free.
            value:
              $ref: '#/components/schemas/Quantity'
            discount:
              type: string
              description: The discount that the voucher applies when it's a discount voucher.
              example: 50%
            expirationDate:
              type: string
              description: The voucher's expiration date.
              format: date-time
              example: '2025-11-20T10:19:46+0000'
            campaign:
              type: string
              description: Campaign this voucher belongs to.
              example: Black Friday mega sale.
            '@type':
              type: string
              enum:
                - voucher
    Error:
      discriminator:
        propertyName: '@type'
        mapping:
          Error: '#/components/schemas/Error'
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          required:
            - code
            - reason
          properties:
            code:
              type: string
              description: 'Application relevant detail, defined in the API or a common list.'
            reason:
              type: string
              description: Explanation of the reason for the error which can be shown to a client user.
            message:
              type: string
              description: >-
                More details and corrective actions related to the error which can be shown to a
                client user.
            status:
              type: string
              description: HTTP Error code extension
            referenceError:
              type: string
              description: URI of documentation describing the error.
      description: 'Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)'
    Hub_FVO:
      type: object
      description: >-
        Sets the communication endpoint address the service instance must use to deliver
        notification information
      required:
        - callback
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - properties:
            callback:
              type: string
              description: The callback being registered.
            query:
              type: string
              description: additional data to be passed
    Hub:
      type: object
      description: >-
        Sets the communication endpoint address the service instance must use to deliver
        notification information
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            id:
              type: string
              description: Id of the listener
            callback:
              type: string
              description: The callback being registered.
            query:
              type: string
              description: additional data to be passed
          required:
            - callback
    JsonPatch:
      description: A JSONPatch document as defined by RFC 6902
      required:
        - op
        - path
      properties:
        op:
          type: string
          description: The operation to be performed
          enum:
            - add
            - remove
            - replace
            - move
            - copy
            - test
        path:
          type: string
          description: A JSON-Pointer
        value:
          description: The value to be used within the operations.
        from:
          type: string
          description: A string containing a JSON Pointer value.
    JsonPatchOperations:
      description: JSONPatch Operations document as defined by RFC 6902
      type: array
      items:
        $ref: '#/components/schemas/JsonPatch'
  parameters:
    Id:
      name: id
      required: true
      schema:
        type: string
      in: path
      description: Identifier of the Service
    Fields:
      name: fields
      in: query
      description: Comma-separated properties to be provided in response
      schema:
        type: string
    Offset:
      name: offset
      in: query
      description: Requested index for start of resources to be provided in response
      schema:
        type: integer
    Limit:
      name: limit
      in: query
      description: Requested number of resources to be provided in response
      schema:
        type: integer
  requestBodies:
    PaymentMethod_FVO:
      description: The PaymentMethod to be created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentMethod_FVO'
      required: true
    PaymentMethod_MVO:
      description: The PaymentMethod to be patched
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentMethod_MVO'
        application/merge-patch+json:
          schema:
            $ref: '#/components/schemas/PaymentMethod_MVO'
        application/json-patch+json:
          schema:
            $ref: '#/components/schemas/JsonPatchOperations'
        application/json-patch-query+json:
          schema:
            $ref: '#/components/schemas/JsonPatchOperations'
      required: true
    PaymentMethodCreateEvent:
      description: PaymentMethod create Event payload
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentMethodCreateEvent'
          examples:
            Create:
              $ref: '#/components/examples/Create_request'
      required: true
    PaymentMethodAttributeValueChangeEvent:
      description: PaymentMethod attributeValueChange Event payload
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentMethodAttributeValueChangeEvent'
          examples:
            AttributeValueChange:
              $ref: '#/components/examples/AttributeValueChange_request'
      required: true
    PaymentMethodStatusChangeEvent:
      description: PaymentMethod statusChange Event payload
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentMethodStatusChange'
          examples:
            StatusChange:
              $ref: '#/components/examples/StatusChange_request'
      required: true
    PaymentMethodDeleteEvent:
      description: PaymentMethod delete Event payload
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentMethodDeleteEvent'
          examples:
            Delete:
              $ref: '#/components/examples/Delete_request'
      required: true
    Hub_FVO:
      description: Data containing the callback endpoint to deliver the information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Hub_FVO'
      required: true
  responses:
    '200':
      description: OK
    '202':
      description: Accepted
    '204':
      description: Deleted
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '405':
      description: Method Not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '501':
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '503':
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    200PaymentMethodArray:
      description: Success
      headers:
        X-Total-Count:
          $ref: '#/components/headers/X-Total-Count'
        X-Result-Count:
          $ref: '#/components/headers/X-Result-Count'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PaymentMethod'
          examples:
            PaymentMethod_list_example:
              $ref: '#/components/examples/PaymentMethod_list_example_response'
    200PaymentMethod_Get:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentMethod'
          examples:
            PaymentMethod_retrieve_example_01:
              $ref: '#/components/examples/PaymentMethod_retrieve_example_01_response'
            PaymentMethod_retrieve_example_11:
              $ref: '#/components/examples/PaymentMethod_retrieve_example_11_response'
    200PaymentMethod_Patch:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentMethod'
        application/merge-patch+json:
          schema:
            $ref: '#/components/schemas/PaymentMethod'
        application/json-patch+json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/PaymentMethod'
              - type: array
                items:
                  $ref: '#/components/schemas/PaymentMethod'
              - type: string
                nullable: true
        application/json-patch-query+json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/PaymentMethod'
              - type: array
                items:
                  $ref: '#/components/schemas/PaymentMethod'
              - type: string
                nullable: true
    200PaymentMethod_Put:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentMethod'
    201PaymentMethod:
      description: Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentMethod'
    Error:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Hub:
      description: Notified
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Hub'
  headers:
    X-Total-Count:
      description: Total number of items matching criteria
      schema:
        type: integer
    X-Result-Count:
      description: Actual number of items returned in the response body
      schema:
        type: integer
  securitySchemes: {}
  examples:
    PaymentMethod_list_example_response:
      value:
        - id: 10c5f5b5-e47177
          name: Main Credit Card
          '@baseType': PaymentMethod
          '@type': BankCard
          brand: Visa
          cardType: Credit
          cardNumber: 0000-0000-0000-0000
          expirationDate: '2025-11-20T10:19:46.000Z'
          nameOnCard: Abiodun Oyeniran
          bank: Barclays Bank Inc.
          status: Active
          statusDate: '2020-07-17T10:12:26.000Z'
        - id: 10c5f5b5-e47175733
          name: Secondary Credit Card
          '@baseType': PaymentMethod
          '@type': BankCard
          brand: MasterCard
          cardType: Credit
          cardNumber: 0000-0000-0010-0000
          expirationDate: '2025-11-20T10:19:46.000Z'
          nameOnCard: Dominc Oyeniran
          bank: UBA Bank.
          status: Active
          statusDate: '2020-07-17T10:12:26.000Z'
      description: An example request to retrieve a list of Payment Method.
    PaymentMethod_retrieve_example_01_response:
      value:
        id: 10c5f5b5-e47177
        name: Main Credit Card
        '@baseType': PaymentMethod
        '@type': BankCard
        brand: Visa
        cardType: Credit
        cardNumber: 0000-0000-0000-0000
        expirationDate: '2025-11-20T10:19:46.000Z'
        nameOnCard: Abiodun Oyeniran
        bank: Barclays Bank Inc.
        status: Active
        statusDate: '2020-07-17T10:12:26.000Z'
      description: >-
        An example request to retrieve a specific Payment Method: The Visa Credit BankCard from
        Barclays Bank Inc which has an id of "10c5f5b5-e47177".
    PaymentMethod_retrieve_example_11_response:
      value:
        id: 10c5f5b5-e47175733
        name: Secondary Credit Card
        '@baseType': PaymentMethod
        '@type': BankCard
        brand: MasterCard
        cardType: Credit
        cardNumber: 0000-0000-0010-0000
        expirationDate: '2025-11-20T10:19:46.000Z'
        nameOnCard: Dominc Oyeniran
        bank: UBA Bank.
        status: Active
        statusDate: '2020-07-17T10:12:26.000Z'
      description: >-
        An example request to retrieve a specific Payment Method: The MasterCard Credit BankCard
        from UBA Bank which has an id of "10c5f5b5-e47175733".
    Create_request:
      value:
        correlationId: 44f0d080-1c4d
        description: PaymentMethodCreateEvent illustration
        domain: Commercial
        eventId: 46bc-bd9d-ac25d76a9c79
        eventTime: '2022-08-25T12:24:21.085Z'
        eventType: PaymentMethodCreateEvent
        priority: '2'
        timeOcurred: '2022-08-25T12:24:13.013Z'
        title: PaymentMethodCreateEvent
        event:
          paymentMethod:
            id: '123456'
            href: 'http://servername/paymentMethod/123456'
            name: Main credit card
            description: My gold mastercard
            isPreferred: true
            validFor:
              startDateTime: '2021-03-17T00:00:00.000Z'
              endDateTime: '2021-04-16T00:00:00.000Z'
            authorizationCode: '1234567890'
            status: InActive
            statusDate: '2021-03-17T00:00:00.000Z'
            statusReason: 'This payment method has expired, therefore its status is now inactive.'
            '@type': PaymentMethod
            brand: MasterCard
            cardType: Debit
            cardNumber: 0000-0000-0000-0000
            expirationDate: '2025-11-25T12:00:00.000Z'
            cvv: '123'
            lastFourDigits: '0000'
            nameOnCard: Abbey S King
            bank: Fictitious Bank Inc
            account:
              - id: '321654'
                href: '{AccountsManagementAPI}/account/321654'
                name: Abbey S King’s account
              - id: '987654'
                href: '{AccountsManagementAPI}/account/987654'
                name: The account of Abbey S King’s daughter
            relatedParty:
              id: '66665555'
              href: '{PartyManagementAPI}/individual/66665555'
              name: Abbey S King
              role: Owner
            relatedPlace:
              id: '55554444'
              href: '{GeographicAddressManagementAPI}/geographicAddress/55554444'
              '@referredType': GeographicAddress
        reportingSystem:
          id: '614'
          name: APP-102
          '@type': ReportingResource
          '@referredType': LogicalResource
        source:
          id: '716'
          name: APP-177
          '@type': ReportingResource
          '@referredType': LogicalResource
        '@baseType': Event
        '@type': PaymentMethodCreateEvent
      description: Message example for PaymentMethodCreateEvent event
    AttributeValueChange_request:
      value:
        correlationId: 49b0f96a-3e30
        description: PaymentMethodAttributeValueChangeEvent illustration
        domain: Commercial
        eventId: 46d5-b63a-6971a3452911
        eventTime: '2022-08-25T12:24:21.097Z'
        eventType: PaymentMethodAttributeValueChangeEvent
        priority: '2'
        timeOcurred: '2022-08-25T12:24:15.278Z'
        title: PaymentMethodAttributeValueChangeEvent
        event:
          paymentMethod:
            href: 'http://servername/paymentMethod/123456'
            id: '123456'
            '@type': PaymentMethod
            validFor:
              startDateTime: '2021-03-17T00:00:00.000Z'
              endDateTime: '2021-04-16T00:00:00.000Z'
        reportingSystem:
          id: '614'
          name: APP-102
          '@type': ReportingResource
          '@referredType': LogicalResource
        source:
          id: '716'
          name: APP-177
          '@type': ReportingResource
          '@referredType': LogicalResource
        '@baseType': Event
        '@type': PaymentMethodAttributeValueChangeEvent
      description: Message example for PaymentMethodAttributeValueChangeEvent event
    StatusChange_request:
      value:
        correlationId: 73ac1641-123e
        description: PaymentMethodStatusChangeEvent illustration
        domain: Commercial
        eventId: 4260-b7bd-9e58411cdc3f
        eventTime: '2022-08-25T12:24:21.110Z'
        eventType: PaymentMethodStatusChangeEvent
        priority: '5'
        timeOcurred: '2022-08-25T12:24:12.420Z'
        title: PaymentMethodStatusChangeEvent
        event:
          paymentMethod:
            id: '123456'
            href: 'http://servername/paymentMethod/123456'
            name: Main credit card
            description: My gold mastercard
            isPreferred: true
            validFor:
              startDateTime: '2021-03-17T00:00:00.000Z'
              endDateTime: '2021-04-16T00:00:00.000Z'
            authorizationCode: '1234567890'
            status: InActive
            statusDate: '2021-03-17T00:00:00.000Z'
            statusReason: 'This payment method has expired, therefore its status is now inactive.'
            '@type': PaymentMethod
            brand: MasterCard
            cardType: Debit
            cardNumber: 0000-0000-0000-0000
            expirationDate: '2025-11-25T12:00:00.000Z'
            cvv: '123'
            lastFourDigits: '0000'
            nameOnCard: Abbey S King
            bank: Fictitious Bank Inc
            account:
              - id: '321654'
                href: '{AccountsManagementAPI}/account/321654'
                name: Abbey S King’s account
              - id: '987654'
                href: '{AccountsManagementAPI}/account/987654'
                name: The account of Abbey S King’s daughter
            relatedParty:
              id: '66665555'
              href: '{PartyManagementAPI}/individual/66665555'
              name: Abbey S King
              role: Owner
            relatedPlace:
              id: '55554444'
              href: '{GeographicAddressManagementAPI}/geographicAddress/55554444'
              '@referredType': GeographicAddress
        reportingSystem:
          id: '614'
          name: APP-102
          '@type': ReportingResource
          '@referredType': LogicalResource
        source:
          id: '716'
          name: APP-177
          '@type': ReportingResource
          '@referredType': LogicalResource
        '@baseType': Event
        '@type': PaymentMethodStatusChangeEvent
      description: Message example for PaymentMethodStatusChangeEvent event
    Delete_request:
      value:
        correlationId: 3e514320-6de9
        description: PaymentMethodDeleteEvent illustration
        domain: Commercial
        eventId: 48da-bdfa-4ee2f084bb44
        eventTime: '2022-08-25T12:24:21.123Z'
        eventType: PaymentMethodDeleteEvent
        priority: '5'
        timeOcurred: '2022-08-25T12:24:19.978Z'
        title: PaymentMethodDeleteEvent
        event:
          paymentMethod:
            id: '123456'
            href: 'http://servername/paymentMethod/123456'
            name: Main credit card
            description: My gold mastercard
            isPreferred: true
            validFor:
              startDateTime: '2021-03-17T00:00:00.000Z'
              endDateTime: '2021-04-16T00:00:00.000Z'
            authorizationCode: '1234567890'
            status: InActive
            statusDate: '2021-03-17T00:00:00.000Z'
            statusReason: 'This payment method has expired, therefore its status is now inactive.'
            '@type': PaymentMethod
            brand: MasterCard
            cardType: Debit
            cardNumber: 0000-0000-0000-0000
            expirationDate: '2025-11-25T12:00:00.000Z'
            cvv: '123'
            lastFourDigits: '0000'
            nameOnCard: Abbey S King
            bank: Fictitious Bank Inc
            account:
              - id: '321654'
                href: '{AccountsManagementAPI}/account/321654'
                name: Abbey S King’s account
              - id: '987654'
                href: '{AccountsManagementAPI}/account/987654'
                name: The account of Abbey S King’s daughter
            relatedParty:
              id: '66665555'
              href: '{PartyManagementAPI}/individual/66665555'
              name: Abbey S King
              role: Owner
            relatedPlace:
              id: '55554444'
              href: '{GeographicAddressManagementAPI}/geographicAddress/55554444'
              '@referredType': GeographicAddress
        reportingSystem:
          id: '614'
          name: APP-102
          '@type': ReportingResource
          '@referredType': LogicalResource
        source:
          id: '716'
          name: APP-177
          '@type': ReportingResource
          '@referredType': LogicalResource
        '@baseType': Event
        '@type': PaymentMethodDeleteEvent
      description: Message example for PaymentMethodDeleteEvent event