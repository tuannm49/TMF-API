{
  "openapi": "3.0.1",
  "info": {
    "title": "Shipment Management",
    "description": "**TMF API Reference : TMF 711 - Shipment Management**",
    "version": "4.0.0"
  },
  "servers": [
    {
      "url": "https://serverRoot/tmf-api/shipmentManagement/v4/"
    }
  ],
  "tags": [
    {
      "name": "shipment"
    },
    {
      "name": "shipmentSpecification"
    },
    {
      "name": "notification listeners (client side)"
    },
    {
      "name": "events subscription"
    }
  ],
  "paths": {
    "/shipment": {
      "get": {
        "tags": [
          "shipment"
        ],
        "summary": "List or find Shipment objects",
        "description": "This operation list or find Shipment entities",
        "operationId": "listShipment",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "shipment"
        ],
        "summary": "Creates a Shipment",
        "description": "This operation creates a Shipment entity.",
        "operationId": "createShipment",
        "requestBody": {
          "description": "The Shipment to be created",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Shipment_Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "shipment"
      }
    },
    "/shipment/{id}": {
      "get": {
        "tags": [
          "shipment"
        ],
        "summary": "Retrieves a Shipment by ID",
        "description": "This operation retrieves a Shipment entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveShipment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Shipment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "shipment"
        ],
        "summary": "Deletes a Shipment",
        "description": "This operation deletes a Shipment entity.",
        "operationId": "deleteShipment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Shipment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "shipment"
        ],
        "summary": "Updates partially a Shipment",
        "description": "This operation updates partially a Shipment entity.",
        "operationId": "patchShipment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Shipment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Shipment to be updated",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/Shipment_Update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "shipment"
      }
    },
    "/shipmentSpecification": {
      "get": {
        "tags": [
          "shipmentSpecification"
        ],
        "summary": "List or find ShipmentSpecification objects",
        "description": "This operation list or find ShipmentSpecification entities",
        "operationId": "listShipmentSpecification",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to be provided in response",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Requested number of resources to be provided in response",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipmentSpecification"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "shipmentSpecification"
        ],
        "summary": "Creates a ShipmentSpecification",
        "description": "This operation creates a ShipmentSpecification entity.",
        "operationId": "createShipmentSpecification",
        "requestBody": {
          "description": "The ShipmentSpecification to be created",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentSpecification_Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "shipmentSpecification"
      }
    },
    "/shipmentSpecification/{id}": {
      "get": {
        "tags": [
          "shipmentSpecification"
        ],
        "summary": "Retrieves a ShipmentSpecification by ID",
        "description": "This operation retrieves a ShipmentSpecification entity. Attribute selection is enabled for all first level attributes.",
        "operationId": "retrieveShipmentSpecification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ShipmentSpecification",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated properties to provide in response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "shipmentSpecification"
        ],
        "summary": "Deletes a ShipmentSpecification",
        "description": "This operation deletes a ShipmentSpecification entity.",
        "operationId": "deleteShipmentSpecification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ShipmentSpecification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "shipmentSpecification"
        ],
        "summary": "Updates partially a ShipmentSpecification",
        "description": "This operation updates partially a ShipmentSpecification entity.",
        "operationId": "patchShipmentSpecification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the ShipmentSpecification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ShipmentSpecification to be updated",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentSpecification_Update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentSpecification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "shipmentSpecification"
      }
    },
    "/hub": {
      "post": {
        "tags": [
          "events subscription"
        ],
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "registerListener",
        "requestBody": {
          "description": "Data containing the callback endpoint to deliver the information",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscriptionInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Subscribed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/hub/{id}": {
      "delete": {
        "tags": [
          "events subscription"
        ],
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId": "unregisterListener",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the registered listener",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/listener/shipmentCreateEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ShipmentCreateEvent",
        "description": "Example of a client listener for receiving the notification ShipmentCreateEvent",
        "operationId": "listenToShipmentCreateEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentCreateEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/shipmentAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ShipmentAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification ShipmentAttributeValueChangeEvent",
        "operationId": "listenToShipmentAttributeValueChangeEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentAttributeValueChangeEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/shipmentDeleteEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ShipmentDeleteEvent",
        "description": "Example of a client listener for receiving the notification ShipmentDeleteEvent",
        "operationId": "listenToShipmentDeleteEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentDeleteEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/shipmentStateChangeEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ShipmentStateChangeEvent",
        "description": "Example of a client listener for receiving the notification ShipmentStateChangeEvent",
        "operationId": "listenToShipmentStateChangeEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentStateChangeEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/shipmentSpecificationCreateEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ShipmentSpecificationCreateEvent",
        "description": "Example of a client listener for receiving the notification ShipmentSpecificationCreateEvent",
        "operationId": "listenToShipmentSpecificationCreateEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentSpecificationCreateEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/shipmentSpecificationAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ShipmentSpecificationAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification ShipmentSpecificationAttributeValueChangeEvent",
        "operationId": "listenToShipmentSpecificationAttributeValueChangeEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentSpecificationAttributeValueChangeEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/shipmentSpecificationDeleteEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ShipmentSpecificationDeleteEvent",
        "description": "Example of a client listener for receiving the notification ShipmentSpecificationDeleteEvent",
        "operationId": "listenToShipmentSpecificationDeleteEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentSpecificationDeleteEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/listener/shipmentSpecificationStateChangeEvent": {
      "post": {
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ShipmentSpecificationStateChangeEvent",
        "description": "Example of a client listener for receiving the notification ShipmentSpecificationStateChangeEvent",
        "operationId": "listenToShipmentSpecificationStateChangeEvent",
        "requestBody": {
          "description": "The event data",
          "content": {
            "application/json;charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentSpecificationStateChangeEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Notified",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "405": {
            "description": "Method Not allowed",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    }
  },
  "components": {
    "schemas": {
      "Addressable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          }
        },
        "description": "Base schema for adressable entities"
      },
      "AgreementItemRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "agreementItemId": {
            "type": "string",
            "description": "Identifier of the agreement"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications."
      },
      "Any": {
        "type": "object"
      },
      "AssociationSpecificationRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "reference to an AssociationSpecification object"
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for this particular attachment",
            "example": "4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "href": {
            "type": "string",
            "description": "URI for this Attachment",
            "format": "uri",
            "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "attachmentType": {
            "type": "string",
            "description": "Attachment type such as video, picture",
            "example": "video"
          },
          "content": {
            "type": "string",
            "description": "The actual contents of the attachment object, if embedded, encoded as base64",
            "format": "base64"
          },
          "description": {
            "type": "string",
            "description": "A narrative text describing the content of the attachment",
            "example": "Photograph of the Product"
          },
          "mimeType": {
            "type": "string",
            "description": "Attachment mime type such as extension file for video, picture and document"
          },
          "name": {
            "type": "string",
            "description": "The name of the attachment"
          },
          "url": {
            "type": "string",
            "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
            "format": "uri",
            "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "size": {
            "$ref": "#/components/schemas/Quantity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Complements the description of an element (for instance a product) through video, pictures..."
      },
      "AttachmentRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique-Identifier for this attachment"
          },
          "href": {
            "type": "string",
            "description": "URL serving as reference for the attachment resource",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "description": "A narrative text describing the content of the attachment"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "url": {
            "type": "string",
            "description": "Link to the attachment media/content",
            "format": "uri"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures"
      },
      "AttachmentRefOrValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for this particular attachment",
            "example": "4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "href": {
            "type": "string",
            "description": "URI for this Attachment",
            "format": "uri",
            "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "attachmentType": {
            "type": "string",
            "description": "Attachment type such as video, picture",
            "example": "video"
          },
          "content": {
            "type": "string",
            "description": "The actual contents of the attachment object, if embedded, encoded as base64",
            "format": "base64"
          },
          "description": {
            "type": "string",
            "description": "A narrative text describing the content of the attachment",
            "example": "Photograph of the Product"
          },
          "mimeType": {
            "type": "string",
            "description": "Attachment mime type such as extension file for video, picture and document"
          },
          "name": {
            "type": "string",
            "description": "The name of the attachment"
          },
          "url": {
            "type": "string",
            "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
            "format": "uri",
            "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "size": {
            "$ref": "#/components/schemas/Quantity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "An attachment by value or by reference. An attachment complements the description of an element, for example through a document, a video, a picture."
      },
      "BillingAccountRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the billing account"
          },
          "href": {
            "type": "string",
            "description": "Reference of the billing account"
          },
          "name": {
            "type": "string",
            "description": "Name of the billing account"
          },
          "ratingType": {
            "type": "string",
            "description": "Indicates whether the account follows a specific payment option such as prepaid or postpaid"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "BillingAccount reference. A BillingAccount is a detailed description of a bill structure."
      },
      "Characteristic": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the characteristic"
          },
          "name": {
            "type": "string",
            "description": "Name of the characteristic"
          },
          "valueType": {
            "type": "string",
            "description": "Data type of the value of the characteristic"
          },
          "characteristicRelationship": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacteristicRelationship"
            }
          },
          "value": {
            "$ref": "#/components/schemas/Any"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Describes a given characteristic of an object or entity through a name/value pair."
      },
      "CharacteristicRelationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the characteristic"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "relationshipType": {
            "type": "string",
            "description": "The type of relationship"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Another Characteristic that is related to the current Characteristic;"
      },
      "CharacteristicSpecification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the characteristic"
          },
          "configurable": {
            "type": "boolean",
            "description": "If true, the Boolean indicates that the target Characteristic is configurable"
          },
          "description": {
            "type": "string",
            "description": "A narrative that explains the CharacteristicSpecification."
          },
          "extensible": {
            "type": "boolean",
            "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
          },
          "isUnique": {
            "type": "boolean",
            "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
          },
          "maxCardinality": {
            "type": "integer",
            "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
          },
          "minCardinality": {
            "type": "integer",
            "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
          },
          "name": {
            "type": "string",
            "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
          },
          "regex": {
            "type": "string",
            "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
          },
          "valueType": {
            "type": "string",
            "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          "charSpecRelationship": {
            "type": "array",
            "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics.",
            "items": {
              "$ref": "#/components/schemas/CharacteristicSpecificationRelationship"
            }
          },
          "characteristicValueSpecification": {
            "type": "array",
            "description": "A CharacteristicValueSpecification object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a CharacteristicSpecification object. The values of the attributes in the CharacteristicValueSpecification object describe the values of the attributes that a corresponding Characteristic object can take on.",
            "items": {
              "$ref": "#/components/schemas/CharacteristicValueSpecification"
            }
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@valueSchemaLocation": {
            "type": "string",
            "description": "This (optional) field provides a link to the schema describing the value type."
          }
        },
        "description": "This class defines a characteristic specification."
      },
      "CharacteristicSpecificationBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for the characteristic"
          },
          "configurable": {
            "type": "boolean",
            "description": "If true, the Boolean indicates that the target Characteristic is configurable"
          },
          "description": {
            "type": "string",
            "description": "A narrative that explains the CharacteristicSpecification."
          },
          "extensible": {
            "type": "boolean",
            "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
          },
          "isUnique": {
            "type": "boolean",
            "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
          },
          "maxCardinality": {
            "type": "integer",
            "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
          },
          "minCardinality": {
            "type": "integer",
            "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
          },
          "name": {
            "type": "string",
            "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
          },
          "regex": {
            "type": "string",
            "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
          },
          "valueType": {
            "type": "string",
            "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@valueSchemaLocation": {
            "type": "string",
            "description": "This (optional) field provides a link to the schema describing the value type."
          }
        },
        "description": "This class defines a characteristic specification."
      },
      "CharacteristicSpecificationRelationship": {
        "type": "object",
        "properties": {
          "characteristicSpecificationId": {
            "type": "string",
            "description": "Unique identifier of the characteristic within the specification"
          },
          "name": {
            "type": "string",
            "description": "Name of the target characteristic within the specification"
          },
          "parentSpecificationHref": {
            "type": "string",
            "description": "Hyperlink reference to the parent specification containing the target characteristic",
            "format": "uri"
          },
          "parentSpecificationId": {
            "type": "string",
            "description": "Unique identifier of the parent specification containing the target characteristic"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Characteristic specifications. The specification characteristic is embedded within the specification whose ID and href are in this entity, and identified by its ID."
      },
      "CharacteristicValueSpecification": {
        "type": "object",
        "properties": {
          "isDefault": {
            "type": "boolean",
            "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
          },
          "rangeInterval": {
            "type": "string",
            "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
          },
          "regex": {
            "type": "string",
            "description": "A regular expression constraint for given value"
          },
          "unitOfMeasure": {
            "type": "string",
            "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
          },
          "valueFrom": {
            "type": "integer",
            "description": "The low range value that a characteristic can take on"
          },
          "valueTo": {
            "type": "integer",
            "description": "The upper range value that a characteristic can take on"
          },
          "valueType": {
            "type": "string",
            "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "value": {
            "$ref": "#/components/schemas/Any"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "specification of a value (number or text or an object) that can be assigned to a Characteristic."
      },
      "ConstraintRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "constraint version"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec."
      },
      "ContactMedium": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "mediumType": {
            "type": "string",
            "description": "Type of the contact medium, such as: email address, telephone number, postal address"
          },
          "preferred": {
            "type": "boolean",
            "description": "If true, indicates that is the preferred contact medium"
          },
          "characteristic": {
            "$ref": "#/components/schemas/MediumCharacteristic"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Indicates the contact medium that could be used to contact the party."
      },
      "Entity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Base entity schema for use in TMForum Open-APIs"
      },
      "EntityRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Entity reference schema to be use for all entityRef class."
      },
      "Extensible": {
        "type": "object",
        "properties": {
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Base Extensible schema for use in TMForum Open-APIs"
      },
      "ExternalReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "externalReferenceType": {
            "type": "string",
            "description": "Type of the external reference"
          },
          "name": {
            "type": "string",
            "description": "External reference name"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "External reference of the individual or reference in other system"
      },
      "MediumCharacteristic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "city": {
            "type": "string",
            "description": "The city"
          },
          "contactType": {
            "type": "string",
            "description": "The type of contact, for example: phone number such as mobile, fixed home, fixed office. postal address such as shipping instalation…"
          },
          "country": {
            "type": "string",
            "description": "The country"
          },
          "emailAddress": {
            "type": "string",
            "description": "Full email address in standard format"
          },
          "faxNumber": {
            "type": "string",
            "description": "The fax number of the contact"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The primary phone number of the contact"
          },
          "postCode": {
            "type": "string",
            "description": "Postcode"
          },
          "socialNetworkId": {
            "type": "string",
            "description": "Identifier as a member of a social network"
          },
          "stateOrProvince": {
            "type": "string",
            "description": "State or province"
          },
          "street1": {
            "type": "string",
            "description": "Describes the street"
          },
          "street2": {
            "type": "string",
            "description": "Complementary street description"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)"
      },
      "Money": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": "Currency (ISO4217 norm uses 3 letters to define the currency)"
          },
          "value": {
            "type": "number",
            "description": "A positive floating point number",
            "format": "float"
          }
        },
        "description": "A base / value business entity used to represent money"
      },
      "Note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the note within its containing entity",
            "example": ""
          },
          "author": {
            "type": "string",
            "description": "Author of the note",
            "example": ""
          },
          "date": {
            "type": "string",
            "description": "Date of the note",
            "format": "date-time"
          },
          "text": {
            "type": "string",
            "description": "Text of the note",
            "example": ""
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Extra information about a given entity"
      },
      "PaymentMethodRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit)."
      },
      "Place": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the place"
          },
          "href": {
            "type": "string",
            "description": "Unique reference of the place"
          },
          "name": {
            "type": "string",
            "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Place reference. Place defines the places where the products are sold or delivered."
      },
      "PlaceRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Place reference. PlaceRef defines the placeRefs where the products are sold or delivered."
      },
      "Price": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "percentage": {
            "type": "number",
            "description": "Percentage to apply for ProdOfferPriceAlteration",
            "format": "float"
          },
          "taxRate": {
            "type": "number",
            "description": "Tax rate",
            "format": "float"
          },
          "dutyFreeAmount": {
            "$ref": "#/components/schemas/Money"
          },
          "taxIncludedAmount": {
            "$ref": "#/components/schemas/Money"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration."
      },
      "PriceAlteration": {
        "required": [
          "price",
          "priceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "applicationDuration": {
            "type": "integer",
            "description": "Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge)"
          },
          "description": {
            "type": "string",
            "description": "A narrative that explains in detail the semantics of this order item price alteration"
          },
          "name": {
            "type": "string",
            "description": "Name of the order item price alteration"
          },
          "priceType": {
            "type": "string",
            "description": "A category that describes the price such as recurring, one time and usage."
          },
          "priority": {
            "type": "integer",
            "description": "Priority level for applying this alteration among all the defined alterations on the order item price"
          },
          "recurringChargePeriod": {
            "type": "string",
            "description": "Could be month, week..."
          },
          "unitOfMeasure": {
            "type": "string",
            "description": "Could be minutes, GB..."
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "productOfferingPrice": {
            "$ref": "#/components/schemas/ProductOfferingPriceRef"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Is an amount, usually of money, that modifies the price charged for an order item."
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the product"
          },
          "href": {
            "type": "string",
            "description": "Reference of the product"
          },
          "description": {
            "type": "string",
            "description": "Is the description of the product. It could be copied from the description of the Product Offering."
          },
          "isBundle": {
            "type": "boolean",
            "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
          },
          "isCustomerVisible": {
            "type": "boolean",
            "description": "If true, the product is visible by the customer."
          },
          "name": {
            "type": "string",
            "description": "Name of the product. It could be the same as the name of the product offering"
          },
          "orderDate": {
            "type": "string",
            "description": "Is the date when the product was ordered",
            "format": "date-time"
          },
          "productSerialNumber": {
            "type": "string",
            "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router."
          },
          "randomAtt": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "description": "Is the date from which the product starts",
            "format": "date-time"
          },
          "terminationDate": {
            "type": "string",
            "description": "Is the date when the product was terminated",
            "format": "date-time"
          },
          "agreement": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgreementItemRef"
            }
          },
          "billingAccount": {
            "$ref": "#/components/schemas/BillingAccountRef"
          },
          "place": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
            }
          },
          "product": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductRefOrValue"
            }
          },
          "productCharacteristic": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Characteristic"
            }
          },
          "productOffering": {
            "$ref": "#/components/schemas/ProductOfferingRef"
          },
          "productOrderItem": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedProductOrderItem"
            }
          },
          "productPrice": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductPrice"
            }
          },
          "productRelationship": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductRelationship"
            }
          },
          "productSpecification": {
            "$ref": "#/components/schemas/ProductSpecificationRef"
          },
          "productTerm": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTerm"
            }
          },
          "realizingResource": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRef"
            }
          },
          "realizingService": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceRef"
            }
          },
          "relatedParty": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ProductStatusType"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "A product offering procured by a customer or other interested party playing a party role. A product is realized as one or more service(s) and / or resource(s)."
      },
      "ProductOfferingPriceRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "ProductPriceOffering reference. An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased"
      },
      "ProductOfferingRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information."
      },
      "ProductPrice": {
        "required": [
          "price",
          "priceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "description": "A narrative that explains in detail the semantics of this product price."
          },
          "name": {
            "type": "string",
            "description": "A short descriptive name such as \"Subscription price\"."
          },
          "priceType": {
            "type": "string",
            "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
          },
          "recurringChargePeriod": {
            "type": "string",
            "description": "Could be month, week..."
          },
          "unitOfMeasure": {
            "type": "string",
            "description": "Could be minutes, GB..."
          },
          "billingAccount": {
            "$ref": "#/components/schemas/BillingAccountRef"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "productOfferingPrice": {
            "$ref": "#/components/schemas/ProductOfferingPriceRef"
          },
          "productPriceAlteration": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceAlteration"
            }
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "An amount, usually of money, that represents the actual price paid by a Customer for a purchase, a rent or a lease of a Product. The price is valid for a defined period of time."
      },
      "ProductRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        }
      },
      "ProductRefOrValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the product"
          },
          "href": {
            "type": "string",
            "description": "Reference of the product"
          },
          "description": {
            "type": "string",
            "description": "Is the description of the product. It could be copied from the description of the Product Offering."
          },
          "isBundle": {
            "type": "boolean",
            "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
          },
          "isCustomerVisible": {
            "type": "boolean",
            "description": "If true, the product is visible by the customer."
          },
          "name": {
            "type": "string",
            "description": "Name of the product. It could be the same as the name of the product offering"
          },
          "orderDate": {
            "type": "string",
            "description": "Is the date when the product was ordered",
            "format": "date-time"
          },
          "productSerialNumber": {
            "type": "string",
            "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router."
          },
          "randomAtt": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "description": "Is the date from which the product starts",
            "format": "date-time"
          },
          "terminationDate": {
            "type": "string",
            "description": "Is the date when the product was terminated",
            "format": "date-time"
          },
          "agreement": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgreementItemRef"
            }
          },
          "billingAccount": {
            "$ref": "#/components/schemas/BillingAccountRef"
          },
          "place": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
            }
          },
          "product": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductRefOrValue"
            }
          },
          "productCharacteristic": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Characteristic"
            }
          },
          "productOffering": {
            "$ref": "#/components/schemas/ProductOfferingRef"
          },
          "productOrderItem": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedProductOrderItem"
            }
          },
          "productPrice": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductPrice"
            }
          },
          "productRelationship": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductRelationship"
            }
          },
          "productSpecification": {
            "$ref": "#/components/schemas/ProductSpecificationRef"
          },
          "productTerm": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTerm"
            }
          },
          "realizingResource": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRef"
            }
          },
          "realizingService": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceRef"
            }
          },
          "relatedParty": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ProductStatusType"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "A product to be created defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the product entity and not the RelatedProductRefOrValue class itself"
      },
      "ProductRelationship": {
        "required": [
          "product",
          "relationshipType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of the product relationship, such as [bundled] if the product is a bundle and you want to describe the bundled products inside this bundle; [reliesOn] if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful"
          },
          "product": {
            "$ref": "#/components/schemas/ProductRefOrValue"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Linked products to the one instantiate, such as [bundled] if the product is a bundle and you want to describe the bundled products inside this bundle; [reliesOn] if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful"
      },
      "ProductSpecificationRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "Version of the product specification"
          },
          "targetProductSchema": {
            "$ref": "#/components/schemas/TargetProductSchema"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Product specification reference: A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role."
      },
      "ProductStatusType": {
        "type": "string",
        "description": "Possible values for the status of the product",
        "enum": [
          "created",
          "pendingActive",
          "cancelled",
          "active",
          "pendingTerminate",
          "terminated",
          "suspended",
          "aborted "
        ]
      },
      "ProductStockRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the ProductStockRef"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "ProductStockRef is a reference to a product stock"
      },
      "ProductTerm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "description": "Description of the productTerm"
          },
          "name": {
            "type": "string",
            "description": "Name of the productTerm"
          },
          "duration": {
            "$ref": "#/components/schemas/Quantity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Description of a productTerm linked to this product. This represent a commitment with a duration"
      },
      "Quantity": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Numeric value in a given unit",
            "format": "float",
            "default": 1
          },
          "units": {
            "type": "string",
            "description": "Unit"
          }
        },
        "description": "An amount in a given unit"
      },
      "RelatedEntity": {
        "required": [
          "@referredType",
          "id",
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "role": {
            "type": "string",
            "description": "The role of an entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "A reference to an entity, where the type of the entity is not known in advance."
      },
      "RelatedParty": {
        "required": [
          "@referredType",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "role": {
            "type": "string",
            "description": "Role played by the related party"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Related Entity reference. A related party defines party or party role linked to a specific entity."
      },
      "RelatedPartyWithContactInfo": {
        "required": [
          "@referredType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "role": {
            "type": "string",
            "description": "Role played by the related party"
          },
          "contact": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactMedium"
            }
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Related party specialization that includes contact information"
      },
      "RelatedPlaceRefOrValue": {
        "required": [
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the place"
          },
          "href": {
            "type": "string",
            "description": "Unique reference of the place"
          },
          "name": {
            "type": "string",
            "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
          },
          "role": {
            "type": "string"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Related Entity reference. A related place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself"
      },
      "RelatedProductOrderItem": {
        "required": [
          "orderItemId",
          "productOrderId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "orderItemAction": {
            "type": "string",
            "description": "Action of the order item for this product"
          },
          "orderItemId": {
            "type": "string",
            "description": "Identifier of the order item where the product was managed"
          },
          "productOrderHref": {
            "type": "string",
            "description": "Reference of the related entity."
          },
          "productOrderId": {
            "type": "string",
            "description": "Unique identifier of a related entity."
          },
          "role": {
            "type": "string",
            "description": "role of the product order item for this product"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "RelatedProductOrderItem (ProductOrder item) .The product order item which triggered product creation/change/termination."
      },
      "RelatedShipment": {
        "required": [
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "role": {
            "type": "string",
            "description": "The role of an entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "A related shipment addressable entity"
      },
      "ReserveProductStockRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Product Stock Reservation reference"
      },
      "ResourceRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        }
      },
      "ServiceRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Service reference, for when Service is used by other entities"
      },
      "Shipment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the shipment"
          },
          "href": {
            "type": "string",
            "description": "Reference of the shipment"
          },
          "collectionDate": {
            "type": "string",
            "description": "The date the package was collected from the carrier (Collection scenario)",
            "format": "date-time"
          },
          "completionDate": {
            "type": "string",
            "description": "Effective delivery date amended by the provider",
            "format": "date-time"
          },
          "deliveryDate": {
            "type": "string",
            "description": "Is the date at which the shipment was completed (customer has taken ownership of the package)",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "description": "Description of the shipment. It could be the same as the description of the shipment specification."
          },
          "expectedDeliveryDate": {
            "type": "string",
            "description": "The date that the shipment will be delivered",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "Name of the shipment. It could be the same as the name of the shipment specification."
          },
          "requestedDeliveryDate": {
            "type": "string",
            "description": "The date requester by the sender for shipment delivery",
            "format": "date-time"
          },
          "characteristic": {
            "type": "array",
            "description": "List of characteristics with values",
            "items": {
              "$ref": "#/components/schemas/Characteristic"
            }
          },
          "externalIdentifier": {
            "type": "array",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "items": {
              "$ref": "#/components/schemas/ExternalReference"
            }
          },
          "note": {
            "type": "array",
            "description": "A list of notes made on this shipment",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethodRef"
          },
          "placeFrom": {
            "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
          },
          "placeTo": {
            "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
          },
          "relatedParty": {
            "type": "array",
            "description": "A list of parties which are involved in this shipment and the role they are playing",
            "items": {
              "$ref": "#/components/schemas/RelatedPartyWithContactInfo"
            }
          },
          "relatedShipment": {
            "$ref": "#/components/schemas/RelatedShipment"
          },
          "shipmentItem": {
            "type": "array",
            "description": "List of items that are part of the shipment (parcel/package)",
            "items": {
              "$ref": "#/components/schemas/ShipmentItem"
            }
          },
          "shipmentPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "shipmentSpecification": {
            "$ref": "#/components/schemas/ShipmentSpecificationRefOrValue"
          },
          "shipmentTracking": {
            "$ref": "#/components/schemas/ShipmentTrackingRef"
          },
          "shippingInstruction": {
            "$ref": "#/components/schemas/ShippingInstruction"
          },
          "weight": {
            "$ref": "#/components/schemas/Quantity"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        }
      },
      "Shipment_Create": {
        "type": "object",
        "properties": {
          "collectionDate": {
            "type": "string",
            "description": "The date the package was collected from the carrier (Collection scenario)",
            "format": "date-time"
          },
          "completionDate": {
            "type": "string",
            "description": "Effective delivery date amended by the provider",
            "format": "date-time"
          },
          "deliveryDate": {
            "type": "string",
            "description": "Is the date at which the shipment was completed (customer has taken ownership of the package)",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "description": "Description of the shipment. It could be the same as the description of the shipment specification."
          },
          "expectedDeliveryDate": {
            "type": "string",
            "description": "The date that the shipment will be delivered",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "Name of the shipment. It could be the same as the name of the shipment specification."
          },
          "requestedDeliveryDate": {
            "type": "string",
            "description": "The date requester by the sender for shipment delivery",
            "format": "date-time"
          },
          "characteristic": {
            "type": "array",
            "description": "List of characteristics with values",
            "items": {
              "$ref": "#/components/schemas/Characteristic"
            }
          },
          "externalIdentifier": {
            "type": "array",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "items": {
              "$ref": "#/components/schemas/ExternalReference"
            }
          },
          "note": {
            "type": "array",
            "description": "A list of notes made on this shipment",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethodRef"
          },
          "placeFrom": {
            "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
          },
          "placeTo": {
            "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
          },
          "relatedParty": {
            "type": "array",
            "description": "A list of parties which are involved in this shipment and the role they are playing",
            "items": {
              "$ref": "#/components/schemas/RelatedPartyWithContactInfo"
            }
          },
          "relatedShipment": {
            "$ref": "#/components/schemas/RelatedShipment"
          },
          "shipmentItem": {
            "type": "array",
            "description": "List of items that are part of the shipment (parcel/package)",
            "items": {
              "$ref": "#/components/schemas/ShipmentItem"
            }
          },
          "shipmentPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "shipmentSpecification": {
            "$ref": "#/components/schemas/ShipmentSpecificationRefOrValue"
          },
          "shipmentTracking": {
            "$ref": "#/components/schemas/ShipmentTrackingRef"
          },
          "shippingInstruction": {
            "$ref": "#/components/schemas/ShippingInstruction"
          },
          "weight": {
            "$ref": "#/components/schemas/Quantity"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "\nSkipped properties: id,href"
      },
      "Shipment_Update": {
        "type": "object",
        "properties": {
          "collectionDate": {
            "type": "string",
            "description": "The date the package was collected from the carrier (Collection scenario)",
            "format": "date-time"
          },
          "completionDate": {
            "type": "string",
            "description": "Effective delivery date amended by the provider",
            "format": "date-time"
          },
          "deliveryDate": {
            "type": "string",
            "description": "Is the date at which the shipment was completed (customer has taken ownership of the package)",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "description": "Description of the shipment. It could be the same as the description of the shipment specification."
          },
          "expectedDeliveryDate": {
            "type": "string",
            "description": "The date that the shipment will be delivered",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "Name of the shipment. It could be the same as the name of the shipment specification."
          },
          "requestedDeliveryDate": {
            "type": "string",
            "description": "The date requester by the sender for shipment delivery",
            "format": "date-time"
          },
          "characteristic": {
            "type": "array",
            "description": "List of characteristics with values",
            "items": {
              "$ref": "#/components/schemas/Characteristic"
            }
          },
          "externalIdentifier": {
            "type": "array",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "items": {
              "$ref": "#/components/schemas/ExternalReference"
            }
          },
          "note": {
            "type": "array",
            "description": "A list of notes made on this shipment",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethodRef"
          },
          "placeFrom": {
            "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
          },
          "placeTo": {
            "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
          },
          "relatedParty": {
            "type": "array",
            "description": "A list of parties which are involved in this shipment and the role they are playing",
            "items": {
              "$ref": "#/components/schemas/RelatedPartyWithContactInfo"
            }
          },
          "relatedShipment": {
            "$ref": "#/components/schemas/RelatedShipment"
          },
          "shipmentItem": {
            "type": "array",
            "description": "List of items that are part of the shipment (parcel/package)",
            "items": {
              "$ref": "#/components/schemas/ShipmentItem"
            }
          },
          "shipmentPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "shipmentSpecification": {
            "$ref": "#/components/schemas/ShipmentSpecificationRefOrValue"
          },
          "shipmentTracking": {
            "$ref": "#/components/schemas/ShipmentTrackingRef"
          },
          "shippingInstruction": {
            "$ref": "#/components/schemas/ShippingInstruction"
          },
          "weight": {
            "$ref": "#/components/schemas/Quantity"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "\nSkipped properties: id,href"
      },
      "ShipmentItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the individual shipment line item"
          },
          "quantity": {
            "type": "string",
            "description": "Identifier of the individual shipment line item"
          },
          "sku": {
            "type": "string",
            "description": "SKU (Stock Keeping Unit) is a unique code that you use to identify every inventory item in your warehouse"
          },
          "action": {
            "$ref": "#/components/schemas/ShipmentItemActionType"
          },
          "characteristic": {
            "type": "array",
            "description": "List of characteristics with values that define the test run",
            "items": {
              "$ref": "#/components/schemas/Characteristic"
            }
          },
          "externalIdentifier": {
            "type": "array",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "items": {
              "$ref": "#/components/schemas/ExternalReference"
            }
          },
          "product": {
            "$ref": "#/components/schemas/ProductRefOrValue"
          },
          "productReservationRef": {
            "$ref": "#/components/schemas/ReserveProductStockRef"
          },
          "productStockRef": {
            "$ref": "#/components/schemas/ProductStockRef"
          },
          "shipmentItemPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        }
      },
      "ShipmentItemActionType": {
        "type": "string",
        "description": "action to be performed on the shipment item",
        "enum": [
          "add",
          "modify",
          "delete",
          "noChange"
        ]
      },
      "ShipmentSpecification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "description": "Description of this REST resource"
          },
          "isBundle": {
            "type": "boolean",
            "description": "isBundle determines whether an ShipmentSpecification represents a single ShipmentSpecification (false), or a bundle of ShipmentSpecification (true)."
          },
          "lastUpdate": {
            "type": "string",
            "description": "Date and time of the last update of this REST resource",
            "format": "date-time"
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status of this catalog item"
          },
          "name": {
            "type": "string",
            "description": "Name given to this REST resource"
          },
          "version": {
            "type": "string",
            "description": "Entity specification version"
          },
          "attachment": {
            "type": "array",
            "description": "Attachments that may be of relevance to this specification, such as picture, document, media\r\n",
            "items": {
              "$ref": "#/components/schemas/AttachmentRefOrValue"
            }
          },
          "constraint": {
            "type": "array",
            "description": "This is a list of constraint references applied to this specification\r\n",
            "items": {
              "$ref": "#/components/schemas/ConstraintRef"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "Parties who manage or otherwise have an interest in this shipment specification",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "shipmentSpecRelationship": {
            "type": "array",
            "description": "Relationship to another shipment specification, might be dependency, substitution, etc.\r\n",
            "items": {
              "$ref": "#/components/schemas/ShipmentSpecificationRelationship"
            }
          },
          "signatureRequiredBy": {
            "$ref": "#/components/schemas/SignatureRequiredByType"
          },
          "specCharacteristic": {
            "type": "array",
            "description": "List of characteristics that the shipment can take",
            "items": {
              "$ref": "#/components/schemas/CharacteristicSpecification"
            }
          },
          "targetShipmentSchema": {
            "$ref": "#/components/schemas/TargetShipmentSchema"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Definition of the nature of a Shipment. For example, could be a standard ground delivery, overnight express with signature required by an adult, etc."
      },
      "ShipmentSpecification_Create": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of this REST resource"
          },
          "isBundle": {
            "type": "boolean",
            "description": "isBundle determines whether an ShipmentSpecification represents a single ShipmentSpecification (false), or a bundle of ShipmentSpecification (true)."
          },
          "lastUpdate": {
            "type": "string",
            "description": "Date and time of the last update of this REST resource",
            "format": "date-time"
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status of this catalog item"
          },
          "name": {
            "type": "string",
            "description": "Name given to this REST resource"
          },
          "version": {
            "type": "string",
            "description": "Entity specification version"
          },
          "attachment": {
            "type": "array",
            "description": "Attachments that may be of relevance to this specification, such as picture, document, media\r\n",
            "items": {
              "$ref": "#/components/schemas/AttachmentRefOrValue"
            }
          },
          "constraint": {
            "type": "array",
            "description": "This is a list of constraint references applied to this specification\r\n",
            "items": {
              "$ref": "#/components/schemas/ConstraintRef"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "Parties who manage or otherwise have an interest in this shipment specification",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "shipmentSpecRelationship": {
            "type": "array",
            "description": "Relationship to another shipment specification, might be dependency, substitution, etc.\r\n",
            "items": {
              "$ref": "#/components/schemas/ShipmentSpecificationRelationship"
            }
          },
          "signatureRequiredBy": {
            "$ref": "#/components/schemas/SignatureRequiredByType"
          },
          "specCharacteristic": {
            "type": "array",
            "description": "List of characteristics that the shipment can take",
            "items": {
              "$ref": "#/components/schemas/CharacteristicSpecification"
            }
          },
          "targetShipmentSchema": {
            "$ref": "#/components/schemas/TargetShipmentSchema"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Definition of the nature of a Shipment. For example, could be a standard ground delivery, overnight express with signature required by an adult, etc.\nSkipped properties: id,href"
      },
      "ShipmentSpecification_Update": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of this REST resource"
          },
          "isBundle": {
            "type": "boolean",
            "description": "isBundle determines whether an ShipmentSpecification represents a single ShipmentSpecification (false), or a bundle of ShipmentSpecification (true)."
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status of this catalog item"
          },
          "name": {
            "type": "string",
            "description": "Name given to this REST resource"
          },
          "version": {
            "type": "string",
            "description": "Entity specification version"
          },
          "attachment": {
            "type": "array",
            "description": "Attachments that may be of relevance to this specification, such as picture, document, media\r\n",
            "items": {
              "$ref": "#/components/schemas/AttachmentRefOrValue"
            }
          },
          "constraint": {
            "type": "array",
            "description": "This is a list of constraint references applied to this specification\r\n",
            "items": {
              "$ref": "#/components/schemas/ConstraintRef"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "Parties who manage or otherwise have an interest in this shipment specification",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "shipmentSpecRelationship": {
            "type": "array",
            "description": "Relationship to another shipment specification, might be dependency, substitution, etc.\r\n",
            "items": {
              "$ref": "#/components/schemas/ShipmentSpecificationRelationship"
            }
          },
          "signatureRequiredBy": {
            "$ref": "#/components/schemas/SignatureRequiredByType"
          },
          "specCharacteristic": {
            "type": "array",
            "description": "List of characteristics that the shipment can take",
            "items": {
              "$ref": "#/components/schemas/CharacteristicSpecification"
            }
          },
          "targetShipmentSchema": {
            "$ref": "#/components/schemas/TargetShipmentSchema"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Definition of the nature of a Shipment. For example, could be a standard ground delivery, overnight express with signature required by an adult, etc.\nSkipped properties: id,href,lastUpdate"
      },
      "ShipmentSpecificationRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "Shipment specification reference"
      },
      "ShipmentSpecificationRefOrValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "description": "Description of this REST resource"
          },
          "isBundle": {
            "type": "boolean",
            "description": "isBundle determines whether an ShipmentSpecification represents a single ShipmentSpecification (false), or a bundle of ShipmentSpecification (true)."
          },
          "lastUpdate": {
            "type": "string",
            "description": "Date and time of the last update of this REST resource",
            "format": "date-time"
          },
          "lifecycleStatus": {
            "type": "string",
            "description": "Used to indicate the current lifecycle status of this catalog item"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "version": {
            "type": "string",
            "description": "Entity specification version"
          },
          "attachment": {
            "type": "array",
            "description": "Attachments that may be of relevance to this specification, such as picture, document, media\r\n",
            "items": {
              "$ref": "#/components/schemas/AttachmentRefOrValue"
            }
          },
          "constraint": {
            "type": "array",
            "description": "This is a list of constraint references applied to this specification\r\n",
            "items": {
              "$ref": "#/components/schemas/ConstraintRef"
            }
          },
          "relatedParty": {
            "type": "array",
            "description": "Parties who manage or otherwise have an interest in this shipment specification",
            "items": {
              "$ref": "#/components/schemas/RelatedParty"
            }
          },
          "shipmentSpecRelationship": {
            "type": "array",
            "description": "Relationship to another shipment specification, might be dependency, substitution, etc.\r\n",
            "items": {
              "$ref": "#/components/schemas/ShipmentSpecificationRelationship"
            }
          },
          "signatureRequiredBy": {
            "$ref": "#/components/schemas/SignatureRequiredByType"
          },
          "specCharacteristic": {
            "type": "array",
            "description": "List of characteristics that the shipment can take",
            "items": {
              "$ref": "#/components/schemas/CharacteristicSpecification"
            }
          },
          "targetShipmentSchema": {
            "$ref": "#/components/schemas/TargetShipmentSchema"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "A shipment specification defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation &amp; @referredType are related to the shipment specification entity and not the related ShipmentSpecificationRefOrValue class itself"
      },
      "ShipmentSpecificationRelationship": {
        "required": [
          "relationshipType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "The name given to the target entity specification instance"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          "role": {
            "type": "string",
            "description": "The association role for this entity specification"
          },
          "associationSpec": {
            "$ref": "#/components/schemas/AssociationSpecificationRef"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "A migration, substitution, dependency or exclusivity relationship between/among entity specifications."
      },
      "ShipmentTrackingRef": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "name": {
            "type": "string",
            "description": "Name of the related entity."
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "description": "A reference to the shipment tracking entity."
      },
      "ShippingInstruction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "href": {
            "type": "string",
            "description": "Hyperlink reference",
            "format": "uri"
          },
          "carrierId": {
            "type": "string",
            "description": "The carrier identifier"
          },
          "carrierServiceCode": {
            "type": "string",
            "description": "The service code used by the carrier to ship the package, royal mail ground, royal mail first class, etc"
          },
          "deliveryAttempts": {
            "type": "integer",
            "description": "Shipping delivery attempts that should be performed"
          },
          "deliverySpeed": {
            "type": "string",
            "description": "Shipping delivery speed, same day, next day, next business day, etc"
          },
          "receiptConfirmation": {
            "type": "string",
            "description": "Delivery confirmation required for the shipment (none, signature, over18Signature)"
          },
          "shippingType": {
            "type": "string",
            "description": "The shipping type, e.g. thick_envelope, small_flat_rate_box, large_package, etc."
          },
          "warehouseId": {
            "type": "string",
            "description": "The identification of the warehouse that the shipment is being shipped from."
          },
          "characteristic": {
            "type": "array",
            "description": "Additional shipping characteristics that maybe specific to one or another carrier",
            "items": {
              "$ref": "#/components/schemas/Characteristic"
            }
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          }
        },
        "description": "Instructions and details for the carrier"
      },
      "SignatureRequiredByType": {
        "type": "string",
        "description": "Possible values for the state of the order",
        "enum": [
          "adult",
          "receiver"
        ]
      },
      "TargetProductSchema": {
        "required": [
          "@schemaLocation",
          "@type"
        ],
        "type": "object",
        "properties": {
          "@schemaLocation": {
            "type": "string",
            "description": "This field provides a link to the schema describing the target product",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "Class type of the target product"
          }
        },
        "description": "The reference object to the schema and type of target product which is described by product specification"
      },
      "TargetShipmentSchema": {
        "required": [
          "@schemaLocation",
          "@type"
        ],
        "type": "object",
        "properties": {
          "@schemaLocation": {
            "type": "string",
            "description": "This field provides a link to the schema describing the target shipment\r\n"
          },
          "@type": {
            "type": "string",
            "description": "Class type of the target shipment"
          }
        },
        "description": "The reference object to the schema and type of target shipment which is described by shipment specification"
      },
      "TimePeriod": {
        "type": "object",
        "properties": {
          "endDateTime": {
            "type": "string",
            "description": "End of the time period, using IETC-RFC-3339 format",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          },
          "startDateTime": {
            "type": "string",
            "description": "Start of the time period, using IETC-RFC-3339 format",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          }
        },
        "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both"
      },
      "EventSubscription": {
        "required": [
          "callback",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the listener"
          },
          "callback": {
            "type": "string",
            "description": "The callback being registered."
          },
          "query": {
            "type": "string",
            "description": "additional data to be passed"
          }
        },
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
      },
      "EventSubscriptionInput": {
        "required": [
          "callback"
        ],
        "type": "object",
        "properties": {
          "callback": {
            "type": "string",
            "description": "The callback being registered."
          },
          "query": {
            "type": "string",
            "description": "additional data to be passed"
          }
        },
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
      },
      "ShipmentCreateEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/ShipmentCreateEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "ShipmentCreateEventPayload": {
        "type": "object",
        "properties": {
          "shipment": {
            "$ref": "#/components/schemas/Shipment"
          }
        },
        "description": "The event data structure"
      },
      "ShipmentAttributeValueChangeEvent": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          },
          "fieldPath": {
            "type": "string",
            "description": "The path identifying the object field concerned by this notification."
          },
          "event": {
            "$ref": "#/components/schemas/ShipmentAttributeValueChangeEventPayload"
          }
        },
        "description": "The notification data structure"
      },
      "ShipmentAttributeValueChangeEventPayload": {
        "type": "object",
        "properties": {
          "shipment": {
            "$ref": "#/components/schemas/Shipment"
          }
        },
        "description": "The event data structure"
      },
      "ShipmentDeleteEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/ShipmentDeleteEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "ShipmentDeleteEventPayload": {
        "type": "object",
        "properties": {
          "shipment": {
            "$ref": "#/components/schemas/Shipment"
          }
        },
        "description": "The event data structure"
      },
      "ShipmentStateChangeEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/ShipmentStateChangeEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "ShipmentStateChangeEventPayload": {
        "type": "object",
        "properties": {
          "shipment": {
            "$ref": "#/components/schemas/Shipment"
          }
        },
        "description": "The event data structure"
      },
      "ShipmentSpecificationCreateEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/ShipmentSpecificationCreateEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "ShipmentSpecificationCreateEventPayload": {
        "type": "object",
        "properties": {
          "shipmentSpecification": {
            "$ref": "#/components/schemas/ShipmentSpecification"
          }
        },
        "description": "The event data structure"
      },
      "ShipmentSpecificationAttributeValueChangeEvent": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          },
          "fieldPath": {
            "type": "string",
            "description": "The path identifying the object field concerned by this notification."
          },
          "event": {
            "$ref": "#/components/schemas/ShipmentSpecificationAttributeValueChangeEventPayload"
          }
        },
        "description": "The notification data structure"
      },
      "ShipmentSpecificationAttributeValueChangeEventPayload": {
        "type": "object",
        "properties": {
          "shipmentSpecification": {
            "$ref": "#/components/schemas/ShipmentSpecification"
          }
        },
        "description": "The event data structure"
      },
      "ShipmentSpecificationDeleteEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/ShipmentSpecificationDeleteEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "ShipmentSpecificationDeleteEventPayload": {
        "type": "object",
        "properties": {
          "shipmentSpecification": {
            "$ref": "#/components/schemas/ShipmentSpecification"
          }
        },
        "description": "The event data structure"
      },
      "ShipmentSpecificationStateChangeEvent": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/ShipmentSpecificationStateChangeEventPayload"
          },
          "eventId": {
            "type": "string",
            "description": "The identifier of the notification."
          },
          "eventTime": {
            "type": "string",
            "description": "Time of the event occurrence.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the notification."
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id for this event."
          },
          "domain": {
            "type": "string",
            "description": "The domain of the event."
          },
          "title": {
            "type": "string",
            "description": "The title of the event."
          },
          "description": {
            "type": "string",
            "description": "An explnatory of the event."
          },
          "priority": {
            "type": "string",
            "description": "A priority."
          },
          "timeOcurred": {
            "type": "string",
            "description": "The time the event occured.",
            "format": "date-time"
          }
        },
        "description": "The notification data structure"
      },
      "ShipmentSpecificationStateChangeEventPayload": {
        "type": "object",
        "properties": {
          "shipmentSpecification": {
            "$ref": "#/components/schemas/ShipmentSpecification"
          }
        },
        "description": "The event data structure"
      },
      "Error": {
        "required": [
          "code",
          "reason"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Application relevant detail, defined in the API or a common list."
          },
          "reason": {
            "type": "string",
            "description": "Explanation of the reason for the error which can be shown to a client user."
          },
          "message": {
            "type": "string",
            "description": "More details and corrective actions related to the error which can be shown to a client user."
          },
          "status": {
            "type": "string",
            "description": "HTTP Error code extension"
          },
          "referenceError": {
            "type": "string",
            "description": "URI of documentation describing the error.",
            "format": "uri"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class."
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
            "format": "uri"
          },
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class entity name."
          }
        },
        "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
      }
    }
  },
  "x-original-swagger-version": "2.0"
}