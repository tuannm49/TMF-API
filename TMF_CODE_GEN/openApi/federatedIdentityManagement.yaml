openapi: 3.0.1
info:
  title: Federated ID
  description: |-
    ## TMF API Reference : TMF691 - Federated Identity API

     The Federated Identity API covers the operations required to allow an  application request identity information about the individual that  is making use of the functionality provided by such application  (the user), or in general to allow an application to request identity  related information about an individual to the system holding such  identity information. This API, instead of defining new operations,  relies on the use of industry standard for identity information such  as OpenID Connect and OAuth2.0
  version: 5.0.0
servers:
  - url: '{apiRoot}/tmf-api/federatedIdentity/v5/'
    variables:
      apiRoot:
        default: 'https://serverRoot'
        enum:
          - 'https://serverRoot'
tags:
  - name: userinfo
    description: Operations for Userinfo Resource
  - name: notification listener
    description: Notifications for Resource Lifecycle and event notifications
  - name: events subscription
    description: Endpoints to register and terminate an Event Listener
paths:
  /hub:
    post:
      operationId: createHub
      summary: Create a subscription (hub) to receive Events
      description: Sets the communication endpoint to receive Events.
      tags:
        - events subscription
      requestBody:
        $ref: '#/components/requestBodies/Hub_FVO'
      responses:
        '201':
          $ref: '#/components/responses/Hub'
        default:
          $ref: '#/components/responses/Error'
  '/hub/{id}':
    get:
      operationId: hubGet
      summary: Retrieve a subscription (hub)
      description: ''
      tags:
        - events subscription
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/Hub'
        default:
          $ref: '#/components/responses/Error'
    delete:
      operationId: hubDelete
      summary: Remove a subscription (hub) to receive Events
      description: ''
      tags:
        - events subscription
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          description: Deleted
        default:
          $ref: '#/components/responses/Error'
  /userinfo:
    get:
      tags:
        - userinfo
      summary: List or find Userinfo objects
      description: List or find Userinfo objects
      operationId: listUserinfo
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/200UserinfoArray'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
  '/userinfo/{id}':
    get:
      tags:
        - userinfo
      summary: Retrieves a Userinfo by ID
      description: >-
        This operation retrieves a Userinfo entity. Attribute selection enabled for all first level
        attributes.
      operationId: retrieveUserinfo
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Fields'
      responses:
        '200':
          $ref: '#/components/responses/200Userinfo_Get'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
        '501':
          $ref: '#/components/responses/501'
        '503':
          $ref: '#/components/responses/503'
components:
  schemas:
    Addressable:
      type: object
      description: Base schema for addressable entities
      properties:
        href:
          type: string
          description: Hyperlink reference
        id:
          type: string
          description: unique identifier
    Attachment:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: >-
            Complements the description of an element (for instance a product) through video,
            pictures...
          properties:
            name:
              type: string
              description: The name of the attachment
            description:
              type: string
              description: A narrative text describing the content of the attachment
              example: Photograph of the Product
            url:
              type: string
              description: 'Uniform Resource Locator, is a web page address (a subset of URI)'
              example: 'https://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f'
            content:
              type: string
              format: base64
              description: 'The actual contents of the attachment object, if embedded, encoded as base64'
            size:
              $ref: '#/components/schemas/Quantity'
            validFor:
              $ref: '#/components/schemas/TimePeriod'
            attachmentType:
              type: string
              description: >-
                a business characterization of the purpose of the attachment, for example logo,
                instructionManual, contractCopy
            mimeType:
              type: string
              description: a technical characterization of the attachment content format using IETF Mime Types
      discriminator:
        propertyName: '@type'
        mapping:
          Attachment: '#/components/schemas/Attachment'
    AttachmentRef:
      allOf:
        - $ref: '#/components/schemas/EntityRef'
        - type: object
          description: >-
            Attachment reference. An attachment complements the description of an element (for
            instance a product) through video, pictures
          properties:
            description:
              type: string
              description: A narrative text describing the content of the attachment
            url:
              description: Link to the attachment media/content
              type: string
      discriminator:
        propertyName: '@type'
        mapping:
          AttachmentRef: '#/components/schemas/AttachmentRef'
    AttachmentRefOrValue:
      type: object
      description: >-
        The polymorphic attributes @type, @schemaLocation & @referredType are related to the
        Attachment entity and not the AttachmentRefOrValue class itself
      oneOf:
        - $ref: '#/components/schemas/Attachment'
        - $ref: '#/components/schemas/AttachmentRef'
      discriminator:
        propertyName: '@type'
        mapping:
          Attachment: '#/components/schemas/Attachment'
          AttachmentRef: '#/components/schemas/AttachmentRef'
    CalendarPeriod:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: >-
            The CalendarPeriod schema represents a period of time within a calendar, defining
            various attributes such as the applicable day, timezone, hour period, and status. It is
            designed to capture information about the availability or status of a calendar period,
            which can be used in scheduling, booking, or resource allocation applications.
          properties:
            day:
              type: string
              description: >-
                Day where the calendar status applies (e.g.: monday, mon-to-fri, weekdays, weekend,
                all week, ...)
            timeZone:
              type: string
              description: >-
                Indication of the timezone applicable to the calendar information (e.g.: Paris,
                GMT+1)
            hourPeriod:
              type: array
              description: Collection of hour intervals
              items:
                $ref: '#/components/schemas/HourPeriod'
            status:
              type: string
              description: >-
                Indication of the availability of the calendar period (e.g.: available, booked,
                etc.)
      discriminator:
        propertyName: '@type'
        mapping:
          CalendarPeriod: '#/components/schemas/CalendarPeriod'
    Characteristic:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: >-
            Describes a given characteristic of an object or entity through a name/value pair. This
            is an abstract base class, the actual value is in one of the strongly-typed subclasses :
            StringCharacteristic, ObjectCharacteristic, FloatCharacteristic, BooleanCharacteristic,
            NumberCharacteristic, IntegerCharacteristic, StringArrayCharacteristic,
            ObjectArrayCharacteristic, BooleanArrayCharacteristic, NumberArrayCharacteristic,
            IntegerArrayCharacteristic...
          properties:
            id:
              type: string
              description: Unique identifier of the characteristic
            name:
              type: string
              description: Name of the characteristic
            valueType:
              type: string
              description: Data type of the value of the characteristic
            characteristicRelationship:
              type: array
              description: Collection of characteristic relationships
              items:
                $ref: '#/components/schemas/CharacteristicRelationship'
      discriminator:
        propertyName: '@type'
        mapping:
          Characteristic: '#/components/schemas/Characteristic'
    CharacteristicRelationship:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: Another Characteristic that is related to the current Characteristic;
          properties:
            id:
              type: string
              description: Unique identifier of the characteristic
            relationshipType:
              type: string
              description: The type of relationship
      discriminator:
        propertyName: '@type'
        mapping:
          CharacteristicRelationship: '#/components/schemas/CharacteristicRelationship'
    ContactMedium:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: >-
            Indicates the contact medium that could be used to contact the party. This is an
            abstract base class, the actual value is in one of the strongly-typed subclasses :
            EmailContactMedium, FaxContactMedium, PhoneContactMedium,
            GeographicAddressContactMedium, SocialMediaContactMedium...
          properties:
            id:
              type: string
              description: Identifier for this contact medium.
            preferred:
              type: boolean
              description: 'If true, indicates that is the preferred contact medium'
            contactType:
              type: string
              description: >-
                Type of the contact medium to qualify it like pro email / personal email. This is
                not used to define the contact medium used.
            validFor:
              $ref: '#/components/schemas/TimePeriod'
      discriminator:
        propertyName: '@type'
        mapping:
          ContactMedium: '#/components/schemas/ContactMedium'
    Entity:
      type: object
      description: Base entity schema for use in TMForum Open-APIs. Property.
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - $ref: '#/components/schemas/Addressable'
    EntityRef:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - $ref: '#/components/schemas/Addressable'
        - type: object
          description: Entity reference schema to be use for all entityRef class.
          properties:
            id:
              type: string
              description: The identifier of the referred entity.
            href:
              type: string
              description: The URI of the referred entity.
            name:
              type: string
              description: Name of the referred entity.
            '@referredType':
              type: string
              description: The actual type of the target instance when needed for disambiguation.
          required:
            - id
    Extensible:
      type: object
      description: >-
        Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means
        that the Entity described by the schema  MUST be extended with the @type
      properties:
        '@type':
          type: string
          description: 'When sub-classing, this defines the sub-class Extensible name'
        '@baseType':
          type: string
          description: 'When sub-classing, this defines the super-class'
        '@schemaLocation':
          type: string
          description: A URI to a JSON-Schema file that defines additional attributes and relationships
      required:
        - '@type'
    ExternalIdentifier:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: >-
            An identification of an entity that is owned by or originates in a software system
            different from the current system, for example a ProductOrder handed off from a commerce
            platform into an order handling system. The structure identifies the system itself, the
            nature of the entity within the system (e.g. class name) and the unique ID of the entity
            within the system. It is anticipated that multiple external IDs can be held for a single
            entity, e.g. if the entity passed through multiple systems on the way to the current
            system. In this case the consumer is expected to sequence the IDs in the array in
            reverse order of provenance, i.e. most recent system first in the list.
          properties:
            owner:
              type: string
              description: Name of the external system that owns the entity.
              example: MagentoCommerce
            externalIdentifierType:
              type: string
              description: >-
                Type of the identification, typically would be the type of the entity within the
                external system
              example: ProductOrder
            id:
              type: string
              description: identification of the entity within the external system.
      discriminator:
        propertyName: '@type'
        mapping:
          ExternalIdentifier: '#/components/schemas/ExternalIdentifier'
    Feature:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: Configuration feature.
          properties:
            isBundle:
              description: True if this is a feature group. Default is false.
              type: boolean
            featureRelationship:
              type: array
              description: Collection of feature relationships
              items:
                $ref: '#/components/schemas/FeatureRelationship'
            featureCharacteristic:
              description: This is a list of Characteristics for a particular feature.
              type: array
              items:
                $ref: '#/components/schemas/Characteristic'
            policyConstraint:
              description: Reference to manage a list of feature specification policy constraints
              type: array
              items:
                $ref: '#/components/schemas/PolicyRef'
            isEnabled:
              description: True if this feature is enabled. Default is true.
              type: boolean
            id:
              type: string
              description: unique identifier
            name:
              description: This is the name for the feature.
              type: string
      discriminator:
        propertyName: '@type'
        mapping:
          Feature: '#/components/schemas/Feature'
          GeographicSiteFeature: '#/components/schemas/GeographicSiteFeature'
    FeatureRelationship:
      allOf:
        - $ref: '#/components/schemas/EntityRef'
        - type: object
          description: Configuration feature
          properties:
            relationshipType:
              description: This is the type of the feature relationship.
              type: string
              enum:
                - excluded
                - includes
                - may include
                - requires
            name:
              description: This is the name of the target feature.
              type: string
            validFor:
              $ref: '#/components/schemas/TimePeriod'
      discriminator:
        propertyName: '@type'
        mapping:
          FeatureRelationship: '#/components/schemas/FeatureRelationship'
    GeographicAddress:
      allOf:
        - $ref: '#/components/schemas/Place'
        - type: object
          description: >-
            Structured textual way of describing how to find a Property in an urban area (country
            properties are often defined differently).

            Note : Address corresponds to SID UrbanPropertyAddress
          properties:
            city:
              type: string
              description: City that the address is in
            country:
              type: string
              description: Country that the address is in
            locality:
              type: string
              description: >-
                An area of defined or undefined boundaries within a local authority or other
                legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET],
                or a suburb, a bounded locality within a city, town or shire principally of urban
                character [ANZLICSTREET]
            postcode:
              type: string
              description: >-
                descriptor for a postal delivery area, used to speed and simplify the delivery of
                mail (also know as zipcode)
            stateOrProvince:
              type: string
              description: the State or Province that the address is in
            streetName:
              type: string
              description: Name of the street or other street type
            streetNr:
              type: string
              description: >-
                Number identifying a specific property on a public street. It may be combined with
                streetNrLast for ranged addresses
            streetNrLast:
              type: string
              description: Last number in a range of street numbers allocated to a property
            streetNrLastSuffix:
              type: string
              description: Last street number suffix for a ranged address
            streetNrSuffix:
              type: string
              description: the first street number suffix
            streetSuffix:
              type: string
              description: A modifier denoting a relative direction
            streetType:
              type: string
              description: >-
                alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade,
                place, tarn, way, wharf
            countryCode:
              type: array
              items:
                $ref: '#/components/schemas/StandardIdentifier'
              description: >-
                Country codes are short alphabetic or numeric geographical codes (geocodes)
                developed to represent countries and dependent areas, for use in data processing and
                communications. Several different systems have been developed to do this. The term
                country code frequently refers to ISO 3166-1 alpha-2 or international dialing codes,
                the E.164 country calling codes.
            geographicLocation:
              $ref: '#/components/schemas/GeographicLocationRefOrValue'
            geographicSubAddress:
              type: array
              description: Collection of sub addresses
              items:
                $ref: '#/components/schemas/GeographicSubAddress'
            geographicAddressType:
              type: string
              description: 'Classification of the address, e.g., residential, industrial '
            geographicSite:
              $ref: '#/components/schemas/GeographicSiteRefOrValue'
            geographicAddressRelationship:
              type: array
              items:
                $ref: '#/components/schemas/GeographicAddressRelationship'
              description: >-
                A list of geographic addresses relationships. Represents a relationship between
                geographic addresses
    GeographicAddressRelationship:
      allOf:
        - $ref: '#/components/schemas/EntityRef'
        - type: object
          description: >-
            The GeographicAddressRelationship schema represents a relationship between geographic
            addresses. It defines the structure for storing information about how two geographic
            addresses are related to each other within a system.
          properties:
            id:
              type: string
              description: >-
                Unique identifier of the related geographic address. This identifier serves as a
                reference to uniquely identify the associated geographic address within the system.
            name:
              type: string
              description: >-
                Name of the geographic address. This attribute provides a human-readable name or
                label for the related geographic address, which can help users identify and
                differentiate between different addresses.
            relationshipType:
              type: string
              description: >-
                Type of relationship between the geographic addresses. This attribute specifies the
                nature of the relationship between the related addresses. It provides context for
                understanding how the addresses are related to each other.
      discriminator:
        propertyName: '@type'
        mapping:
          GeographicAddressRelationship: '#/components/schemas/GeographicAddressRelationship'
    GeographicLocation:
      allOf:
        - $ref: '#/components/schemas/Place'
        - type: object
          description: >-
            A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of
            Point (addresses and locations), MultiPoint, LineString (streets, highways and
            boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the
            @type attribute to specify which of these is being specified by the geometry attribute.
          properties:
            bbox:
              $ref: '#/components/schemas/bbox'
    GeographicLocationRef:
      type: object
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          GeographicLocationRef: '#/components/schemas/GeographicLocationRef'
    GeographicLocationRefOrValue:
      type: object
      description: >-
        The polymorphic attributes @type, @schemaLocation & @referredType are related to the
        GeographicLocation entity and not the GeographicLocationRefOrValue class itself
      oneOf:
        - $ref: '#/components/schemas/GeographicLocation'
        - $ref: '#/components/schemas/GeographicLocationRef'
      discriminator:
        propertyName: '@type'
        mapping:
          GeographicLocation: '#/components/schemas/GeographicLocation'
          GeographicLocationRef: '#/components/schemas/GeographicLocationRef'
    GeographicSite:
      allOf:
        - $ref: '#/components/schemas/Place'
        - type: object
          description: >-
            It defines a Site as a convenience class that allows to easily refer to places important
            to other entities
          properties:
            code:
              type: string
              description: 'A code that may be used for some addressing schemes eg: [ANSI T1.253-1999]'
              example: BTS
            creationDate:
              type: string
              format: date-time
              description: Date and time when the GeographicSite was created
              example: '2024-09-23T00:00:00Z'
            description:
              type: string
              description: Text describing additional information regarding the site
              example: GeographiSite for the base station BS-9283
            status:
              type: string
              description: >-
                The condition of the GeographicSite, such as planned, underConstruction, cancelled,
                active, inactive, former
              example: planned
            relatedParty:
              type: array
              description: Related parties collection
              items:
                $ref: '#/components/schemas/RelatedPartyRefOrPartyRoleRef'
            externalIdentifier:
              type: array
              description: Collection of external identifiers
              items:
                $ref: '#/components/schemas/ExternalIdentifier'
            calendar:
              type: array
              description: Collection of calendar items
              items:
                $ref: '#/components/schemas/CalendarPeriod'
            place:
              type: array
              description: Collection of place objects
              items:
                $ref: '#/components/schemas/PlaceRefOrValue'
            siteRelationship:
              type: array
              description: Collection of site siteRelationships
              items:
                $ref: '#/components/schemas/GeographicSiteRelationship'
            siteCategory:
              type: string
              description: Site classification/category.
              example: ShoppingUnit
            contactMedium:
              type: array
              description: Collection of contact information
              items:
                $ref: '#/components/schemas/ContactMedium'
            siteFeature:
              type: array
              description: Collection of site features
              items:
                $ref: '#/components/schemas/GeographicSiteFeature'
    GeographicSiteFeature:
      allOf:
        - $ref: '#/components/schemas/Feature'
        - type: object
          description: >-
            Geographic Site Feature captures  various site information, ranging from survey data to
            safety guidelines and hazard information
          properties:
            validFor:
              type: array
              description: Collection of validity information
              items:
                $ref: '#/components/schemas/CalendarPeriod'
            attachment:
              type: array
              description: >-
                Attachments that may be of relevance to this specification, such as picture,
                document, media
              items:
                $ref: '#/components/schemas/AttachmentRefOrValue'
            note:
              type: array
              description: Collection of notes
              items:
                $ref: '#/components/schemas/Note'
            relatedParty:
              type: array
              items:
                $ref: '#/components/schemas/RelatedPartyRefOrPartyRoleRef'
              description: The associated party or partyRole
              minItems: 1
            featureCategory:
              type: array
              description: Collection of feature category
              items:
                type: string
                description: >-
                  This parameter represents a feature category which may be assigned to certain
                  groups of features.
                example: Access Information
    GeographicSiteRef:
      type: object
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          GeographicSiteRef: '#/components/schemas/GeographicSiteRef'
    GeographicSiteRefOrValue:
      type: object
      description: >-
        The polymorphic attributes @type, @schemaLocation & @referredType are related to the
        GeographicSite entity and not the GeographicSiteRefOrValue class itself
      oneOf:
        - $ref: '#/components/schemas/GeographicSite'
        - $ref: '#/components/schemas/GeographicSiteRef'
      discriminator:
        propertyName: '@type'
        mapping:
          GeographicSite: '#/components/schemas/GeographicSite'
          GeographicSiteRef: '#/components/schemas/GeographicSiteRef'
    GeographicSiteRelationship:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: Details of geographic site relationship
          properties:
            href:
              type: string
              description: Reference of the related geographic site
            role:
              type: string
              description: Role of the related site in the relationship
            validFor:
              $ref: '#/components/schemas/TimePeriod'
            id:
              type: string
              description: Unique identifier of the related site entity within the server
            relationshipType:
              type: string
              description: Type of relationship
      discriminator:
        propertyName: '@type'
        mapping:
          GeographicSiteRelationship: '#/components/schemas/GeographicSiteRelationship'
    GeographicSubAddress:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: >-
            Representation of a GeographicSubAddress 

            It is used for addressing within a property in an urban area (country properties are
            often defined differently). It may refer to a building, a building cluster, or a floor
            of a multistory building.
          properties:
            buildingName:
              type: string
              description: allows for buildings that have well-known names
            href:
              type: string
              description: Link to the subAddress
            id:
              type: string
              description: Unique Identifier of the subAddress
            levelNumber:
              type: string
              description: 'used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2'
            levelType:
              type: string
              description: describes level types within a building
            name:
              type: string
              description: Name of the subAddress to identify it with a meaningful identification
            privateStreetName:
              type: string
              description: >-
                private streets internal to a property (e.g. a university) may have internal names
                that are not recorded by the land title office.
            privateStreetNumber:
              type: string
              description: private streets numbers internal to a private street
            subUnit:
              type: array
              description: >-
                Representation of a SubUnit. It is used for describing subunit within a subAddress
                e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.
              items:
                $ref: '#/components/schemas/GeographicSubAddressUnit'
            subAddressType:
              type: string
              description: 'Type of subAddress : it can be a subunit or a private street'
      discriminator:
        propertyName: '@type'
        mapping:
          GeographicSubAddress: '#/components/schemas/GeographicSubAddress'
    GeographicSubAddressUnit:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: >-
            Representation of a SubUnit. It is used for describing subunit within a subAddress e.g.
            BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.
          properties:
            subUnitNumber:
              type: string
              description: >-
                The discriminator used for the subunit, often just a simple number but may also be a
                range.
            subUnitType:
              type: string
              description: 'The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF, RACK'
      discriminator:
        propertyName: '@type'
        mapping:
          GeographicSubAddressUnit: '#/components/schemas/GeographicSubAddressUnit'
    HourPeriod:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: Hour interval
          properties:
            endHour:
              type: string
              description: The time when the status ends applying
            startHour:
              type: string
              description: The time when the status starts applying
      discriminator:
        propertyName: '@type'
        mapping:
          HourPeriod: '#/components/schemas/HourPeriod'
    IndividualIdentification:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: >-
            Represents our registration of information used as proof of identity by an individual
            (passport, national identity card, drivers license, social security number, birth
            certificate)
          properties:
            identificationId:
              type: string
              description: Identifier
            issuingAuthority:
              type: string
              description: 'Authority which has issued the identifier, such as: social security, town hall'
            issuingDate:
              type: string
              format: date-time
              description: Date at which the identifier was issued
            identificationType:
              type: string
              description: >-
                Identification type (passport, national identity card, drivers license, social
                security number, birth certificate)
            validFor:
              $ref: '#/components/schemas/TimePeriod'
            attachment:
              $ref: '#/components/schemas/AttachmentRefOrValue'
      discriminator:
        propertyName: '@type'
        mapping:
          IndividualIdentification: '#/components/schemas/IndividualIdentification'
    LineString:
      type: object
      description: 'GeoJSON: A collection of Points forming a connected line'
      properties:
        type:
          type: string
          enum:
            - LineString
        coordinates:
          $ref: '#/components/schemas/lineString'
    MultiLineString:
      type: object
      description: 'GeoJSON: A collection of distinct LineStrings'
      properties:
        type:
          type: string
          enum:
            - MultiLineString
        coordinates:
          $ref: '#/components/schemas/lineString'
    MultiPoint:
      type: object
      description: 'GeoJSON: A collection of Points'
      properties:
        type:
          type: string
          enum:
            - MultiPoint
        coordinates:
          $ref: '#/components/schemas/positionArray'
    MultiPolygon:
      type: object
      description: 'GeoJSON: A collection of Polygons'
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        coordinates:
          $ref: '#/components/schemas/multiPolygon'
    Note:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: Extra information about a given entity
          properties:
            id:
              type: string
              description: Identifier of the note within its containing entity
              example: afa9-3d90aaa8da0f
            author:
              type: string
              description: Author of the note
              example: Mr. N. Bene
            date:
              type: string
              format: date-time
              description: Date of the note
              example: '2020-11-20T08:00:00Z'
            text:
              type: string
              description: Text of the note
              example: This is important
      discriminator:
        propertyName: '@type'
        mapping:
          Note: '#/components/schemas/Note'
    PartyRef:
      type: object
      description: A Party reference
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          PartyRef: '#/components/schemas/PartyRef'
    PartyRefOrPartyRoleRef:
      type: object
      description: ''
      oneOf:
        - $ref: '#/components/schemas/PartyRef'
        - $ref: '#/components/schemas/PartyRoleRef'
      discriminator:
        propertyName: '@type'
        mapping:
          PartyRef: '#/components/schemas/PartyRef'
          PartyRoleRef: '#/components/schemas/PartyRoleRef'
    PartyRoleRef:
      allOf:
        - $ref: '#/components/schemas/EntityRef'
        - type: object
          description: >-
            Party role reference. A party role represents the part played by a party in a given
            context.
          properties:
            partyId:
              type: string
              description: The identifier of the engaged party that is linked to the PartyRole object.
            partyName:
              type: string
              description: The name of the engaged party that is linked to the PartyRole object.
      discriminator:
        propertyName: '@type'
        mapping:
          PartyRoleRef: '#/components/schemas/PartyRoleRef'
    PermissionSetRef:
      type: object
      description: >-
        Permission Reference. The PermissionSet is a set of Permissions granted to a user (party,
        party role or resource). The set may be granted explicitly by an authorized user or may be
        acquired implicitly due to the role that the user is playing.
      allOf:
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          PermissionSetRef: '#/components/schemas/PermissionSetRef'
    Place:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: Place reference.
          properties:
            externalIdentifier:
              type: array
              description: Collection of external identifiers
              items:
                $ref: '#/components/schemas/ExternalIdentifier'
      discriminator:
        propertyName: '@type'
        mapping:
          Place: '#/components/schemas/Place'
          GeographicAddress: '#/components/schemas/GeographicAddress'
          GeographicLocation: '#/components/schemas/GeographicLocation'
          GeographicSite: '#/components/schemas/GeographicSite'
    PlaceRef:
      type: object
      description: Place reference.
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - $ref: '#/components/schemas/EntityRef'
      discriminator:
        propertyName: '@type'
        mapping:
          PlaceRef: '#/components/schemas/PlaceRef'
    PlaceRefOrValue:
      type: object
      description: >-
        The polymorphic attributes @type, @schemaLocation & @referredType are related to the Place
        entity and not the PlaceRefOrValue class itself
      oneOf:
        - $ref: '#/components/schemas/GeographicLocation'
        - $ref: '#/components/schemas/GeographicSite'
        - $ref: '#/components/schemas/GeographicAddress'
        - $ref: '#/components/schemas/PlaceRef'
      discriminator:
        propertyName: '@type'
        mapping:
          GeographicLocation: '#/components/schemas/GeographicLocation'
          GeographicSite: '#/components/schemas/GeographicSite'
          GeographicAddress: '#/components/schemas/GeographicAddress'
          PlaceRef: '#/components/schemas/PlaceRef'
    Point:
      type: object
      description: 'GeoJSON: A single position'
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          $ref: '#/components/schemas/position'
    PolicyRef:
      allOf:
        - $ref: '#/components/schemas/EntityRef'
        - type: object
          description: Reference to managed Policy object
          properties:
            id:
              type: string
              description: unique identifier
            href:
              type: string
              description: Hyperlink reference
            version:
              type: string
            '@type':
              type: string
              description: 'When sub-classing, this defines the sub-class Extensible name'
            '@baseType':
              type: string
              description: 'When sub-classing, this defines the super-class'
            '@schemaLocation':
              type: string
              description: A URI to a JSON-Schema file that defines additional attributes and relationships
      discriminator:
        propertyName: '@type'
        mapping:
          PolicyRef: '#/components/schemas/PolicyRef'
    Polygon:
      type: object
      description: 'GeoJSON: An array of linear rings'
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          $ref: '#/components/schemas/polygon'
    Quantity:
      type: object
      description: An amount in a given unit
      properties:
        amount:
          type: number
          format: float
          default: 1
          description: Numeric value in a given unit
        units:
          type: string
          description: Unit
    RelatedPartyRefOrPartyRoleRef:
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          description: >-
            RelatedParty reference. A related party defines party or party role or its reference,
            linked to a specific entity
          properties:
            role:
              description: >-
                Role played by the related party or party role in the context of the specific entity
                it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'
              type: string
            partyOrPartyRole:
              $ref: '#/components/schemas/PartyRefOrPartyRoleRef'
      discriminator:
        propertyName: '@type'
        mapping:
          RelatedPartyRefOrPartyRoleRef: '#/components/schemas/RelatedPartyRefOrPartyRoleRef'
    StandardIdentifier:
      allOf:
        - $ref: '#/components/schemas/Entity'
        - type: object
          description: >-
            The corresponding identification of the resource in different standard, regulatory
            definitions. The standard specification identifier (e.g., ISO 3166-1 Alpha-2) and the
            corresponding value (e.g., BE) relevant to a particular resource. It is anticipated that
            multiple standards can provide definitions for a single entity, e.g., a country
            identifier can be specified in various standards (e.g., "ISO 3166-1 Alpha 2",  "ISO
            3166-1 Alpha 3", "ISO 3166-1 Numeric")
          properties:
            format:
              type: string
              description: 'Standard/Regulatory definition identifier. e.g., ISO 3166-1'
              example: ISO 3166-1
            value:
              type: string
              description: 'The value of the resource in the corresponding standard.e.g., a country code value'
              example: GB
      discriminator:
        propertyName: '@type'
        mapping:
          StandardIdentifier: '#/components/schemas/StandardIdentifier'
    TimePeriod:
      type: object
      description: 'A period of time, either as a deadline (endDateTime only) a startDateTime only, or both'
      properties:
        startDateTime:
          description: 'Start of the time period, using IETC-RFC-3339 format'
          type: string
          format: date-time
          example: '1985-04-12T23:20:50.52Z'
        endDateTime:
          description: 'End of the time period, using IETC-RFC-3339 format'
          type: string
          format: date-time
          example: '1985-04-12T23:20:50.52Z'
    Userinfo:
      properties:
        sub:
          type: string
          description: Subject - Unique Identifier for the End-User
          example: b103d5ed-8cf6-49ac-9ef3-552075b7defb
        name:
          type: string
          description: >-
            End-User's full name in displayable form including all name parts, possibly including
            titles and suffixes, ordered according to the End-User's locale and preferences
          example: Jane Doe Mary
        family_name:
          type: string
          description: >-
            Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have
            multiple family names or no family name; all can be present, with the names being
            separated by space characters
          example: Doe
        given_name:
          type: string
          description: >-
            Given name(s) or first name(s) of the End-User. Note that in some cultures, people can
            have multiple given names; all can be present, with the names being separated by space
            characters
          example: Jane
        middle_name:
          type: string
          description: >-
            Middle name(s) of the End-User. Note that in some cultures, people can have multiple
            middle names; all can be present, with the names being separated by space characters.
            Also note that in some cultures, middle names are not used
          example: Mary
        nickname:
          type: string
          description: >-
            Casual name of the End-User that may or may not be the same as the given_name. For
            instance, a nickname value of Mike might be returned alongside a given_name value of
            Michael
          example: JaneDoe
        preferred_username:
          type: string
          description: >-
            Shorthand name by which the End-User wishes to be referred to at the RP, such as janeDoe
            or j.doe. This value MAY be any valid JSON string including special characters such as
            @, /, or whitespace
          example: janeDoe
        address:
          $ref: '#/components/schemas/GeographicAddress'
        birthdate:
          type: string
          description: >-
            End-User's birthday, represented as an [ISO8601-2004] YYYY-MM-DD format. The year MAY be
            0000, indicating that it is omitted. To represent only the year, YYYY format is allowed.
            Note that depending on the underlying platform's date related function, providing just
            year can result in varying month and day, so the implementers need to take this factor
            into account to correctly process the dates
          example: '1970-11-02'
        email:
          type: string
          description: >-
            End-User's preferred e-mail address. Its value MUST conform to the [RFC5322] addr-spec
            syntax
          example: jane.doe@email.com
        email_verified:
          type: boolean
          default: false
          description: True if the user's email has been verified.
        gender:
          type: string
          description: >-
            End-User's gender. Values defined by this specification are female and male. Other
            values MAY be used when neither of the defined values are applicable
          example: female
        legalId:
          type: array
          items:
            $ref: '#/components/schemas/IndividualIdentification'
          description: Identification documentation of the contact
        locale:
          type: string
          description: >-
            End-User's locale, represented as a [RFC5646] language tag. This is typically an
            [ISO639-1] language code in lowercase and an [ISO3166-1] country code in uppercase,
            separated by a dash. For example, en-US or fr-CA. As a compatibility note, some
            implementations have used an underscore as the separator rather than a dash, for
            example, en_US
          example: en_US
        phone_number:
          type: string
          description: >-
            End-User's preferred telephone number. [E.164] is RECOMMENDED as the format of this
            Claim, for example, +1 (425) 555-1212 or +56 82) 687 2400. If the phone number contains
            an extension, it is RECOMMENDED that the extension be represented using the [RFC3966]
            extension syntax, for example, +1 (604) 555-1234;ext=5678
          example: +1 (425) 555-1212
        phone_number_verified:
          type: boolean
          default: false
          description: True if the user's phone number has been verified.
        picture:
          type: string
          description: >-
            URL of the End-User's profile picture. This URL MUST refer to an image file (for
            example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image.
            Note that this URL SHOULD specifically reference a profile photo of the End-User
            suitable for displaying when describing the End-User, rather than an arbitrary photo
            taken by the End-User
          example: 'https://someurl.com/janeDoe.jpg'
        profile:
          type: string
          description: >-
            URL of the End-User's profile page. The contents of this Web page SHOULD be about the
            End-User
          example: 'https://myblog.com/janeDoe'
        website:
          type: string
          description: >-
            URL of the End-User's Web page or blog. This Web page SHOULD contain information
            published by the End-User or an organization that the End-User is affiliated with
          example: 'https://janedoe.com'
        zoneinfo:
          type: string
          description: >-
            String from 'zoneinfo' time zone database representing the End-User's time zone. For
            example, Europe/Paris or America/Los_Angeles
          example: America/Los_Angeles
        userPermission:
          type: array
          items:
            $ref: '#/components/schemas/PermissionSetRef'
          description: 'The set of Permissions granted to the user (party, party role or resource).'
    bbox:
      items:
        type: number
      minItems: 4
      type: array
      description: >-
        A bounding box array that contains the geometry. The axes order follows the axes order of
        the geometry
    lineString:
      items:
        $ref: '#/components/schemas/position'
      minItems: 2
      type: array
      description: 'GeoJSON: An array of two or more positions'
    linearRing:
      items:
        $ref: '#/components/schemas/position'
      minItems: 4
      type: array
      description: 'GeoJSON: An array of four or more positions where the first equals the last'
    multiLineString:
      items:
        $ref: '#/components/schemas/lineString'
      minItems: 1
      type: array
      description: 'GeoJSON: One or more lines'
    multiPolygon:
      items:
        $ref: '#/components/schemas/polygon'
      minItems: 1
      type: array
      description: 'GeoJSON: An array of polygons'
    polygon:
      items:
        $ref: '#/components/schemas/linearRing'
      minItems: 1
      type: array
      description: 'GeoJSON: An array of linear rings'
    position:
      items:
        type: number
      minItems: 2
      type: array
      description: 'GeoJSON: A single position'
    positionArray:
      items:
        $ref: '#/components/schemas/position'
      type: array
      description: 'GeoJSON: An array of positions'
    Error:
      discriminator:
        propertyName: '@type'
        mapping:
          Error: '#/components/schemas/Error'
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - type: object
          required:
            - code
            - reason
          properties:
            code:
              type: string
              description: 'Application relevant detail, defined in the API or a common list.'
            reason:
              type: string
              description: Explanation of the reason for the error which can be shown to a client user.
            message:
              type: string
              description: >-
                More details and corrective actions related to the error which can be shown to a
                client user.
            status:
              type: string
              description: HTTP Error code extension
            referenceError:
              type: string
              description: URI of documentation describing the error.
      description: 'Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)'
    Hub_FVO:
      type: object
      description: >-
        Sets the communication endpoint address the service instance must use to deliver
        notification information
      required:
        - callback
      allOf:
        - $ref: '#/components/schemas/Extensible'
        - properties:
            callback:
              type: string
              description: The callback being registered.
            query:
              type: string
              description: additional data to be passed
    Hub:
      type: object
      description: >-
        Sets the communication endpoint address the service instance must use to deliver
        notification information
      allOf:
        - $ref: '#/components/schemas/Entity'
        - properties:
            id:
              type: string
              description: Id of the listener
            callback:
              type: string
              description: The callback being registered.
            query:
              type: string
              description: additional data to be passed
          required:
            - callback
  parameters:
    Id:
      name: id
      required: true
      schema:
        type: string
      in: path
      description: Identifier of the Resource
    Fields:
      name: fields
      in: query
      description: Comma-separated properties to be provided in response
      schema:
        type: string
    Offset:
      name: offset
      in: query
      description: Requested index for start of resources to be provided in response
      schema:
        type: integer
    Limit:
      name: limit
      in: query
      description: Requested number of resources to be provided in response
      schema:
        type: integer
  requestBodies:
    Hub_FVO:
      description: Data containing the callback endpoint to deliver the information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Hub_FVO'
          examples:
            Basic Hub Example Request:
              value:
                '@type': Hub
                callback: 'https://host/tmf-api/specificAPIName/v5/listener/specificEventListener'
                query: data
      required: true
  responses:
    '200':
      description: OK
    '202':
      description: Accepted
    '204':
      description: Deleted
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            basic:
              summary: Bad Request Error
              value:
                '@type': Error
                code: ERR400
                reason: Bad Request
                message: >-
                  The server could not understand the request due to invalid syntax. Please correct
                  the syntax and try again.
                referenceError: 'https://host/errors'
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            basic:
              summary: Unauthorized Error
              value:
                '@type': Error
                code: ERR401
                reason: Unauthorized
                message: >-
                  You are not authorized to access the requested resource. Please provide the
                  correct credentials.
                referenceError: 'https://host/errors'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            basic:
              summary: Forbidden Error
              value:
                '@type': Error
                code: ERR403
                reason: Forbidden
                message: >-
                  You don't have the permission to access the requested resource. It is either
                  read-protected or not readable by the server.
                referenceError: 'https://host/errors'
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            basic:
              summary: Not Found Error
              value:
                '@type': Error
                code: ERR404
                reason: Not Found
                message: The requested URL was not found on the server.
                referenceError: 'https://host/errors'
    '405':
      description: Method Not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            basic:
              summary: Method Not allowed Error
              value:
                '@type': Error
                code: ERR405
                reason: Method Not allowed
                message: The method is not allowed for the requested URL.
                referenceError: 'https://host/errors'
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            basic:
              summary: Conflict Error
              value:
                '@type': Error
                code: ERR409
                reason: Conflict
                message: >-
                  The request could not be completed due to a conflict with the current state of the
                  target resource.
                referenceError: 'https://host/errors'
    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            basic:
              summary: Internal Server Error example
              value:
                '@type': Error
                code: ERR500
                reason: Internal Server Error
                message: The server encountered an internal error. Please contact the system administrator.
                referenceError: 'https://host/errors'
    '501':
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            basic:
              summary: Not Implemented Error
              value:
                '@type': Error
                code: ERR501
                reason: The requested operation is not implemented
                message: >-
                  The requested operation is not implemented. Please contact the system
                  administrator.
                referenceError: 'https://host/errors'
    '503':
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            basic:
              summary: Service Unavailable Error
              value:
                '@type': Error
                code: ERR503
                reason: Service Unavailable
                message: The service is currently unavailable. Please try again later.
                referenceError: 'https://host/errors'
    200UserinfoArray:
      description: Success
      headers:
        X-Total-Count:
          $ref: '#/components/headers/X-Total-Count'
        X-Result-Count:
          $ref: '#/components/headers/X-Result-Count'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Userinfo'
          examples:
            Userinfo_list_example:
              $ref: '#/components/examples/Userinfo_list_example_response'
    200Userinfo_Get:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Userinfo'
          examples:
            Userinfo_retrieve_example:
              $ref: '#/components/examples/Userinfo_retrieve_example_response'
    200Userinfo_Patch:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Userinfo'
        application/merge-patch+json:
          schema:
            $ref: '#/components/schemas/Userinfo'
        application/json-patch+json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Userinfo'
              - type: array
                items:
                  $ref: '#/components/schemas/Userinfo'
              - type: string
                nullable: true
        application/json-patch-query+json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Userinfo'
              - type: array
                items:
                  $ref: '#/components/schemas/Userinfo'
              - type: string
                nullable: true
    201Userinfo:
      description: OK/Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Userinfo'
    Error:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            basic:
              summary: Error example
              value:
                '@type': Error
                code: ERR001
                reason: Missing information
                message: Please provide the additional example information
                referenceError: 'https://host/errors'
    Hub:
      description: Notified
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Hub'
          examples:
            basic:
              summary: Hub example
              value:
                '@type': Hub
                callback: 'https://host/tmf-api/specificAPIName/v5/listener/specificEventListener'
  headers:
    X-Total-Count:
      description: Total number of items matching criteria
      schema:
        type: integer
    X-Result-Count:
      description: Actual number of items returned in the response body
      schema:
        type: integer
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  examples:
    Userinfo_list_example_response:
      value:
        - id: '3180'
          href: 'https://host:port/userInfo/a066ffd5-f685-43bc-ad57-bfb7639decb0'
          '@schemaLocation': 'https://mycsp.com:8080/tmf-api/schema/Common/Userinfo.schema.json'
          '@type': Userinfo
          address:
            id: 1a2b3c
            href: 'https://host:port/location/geographicAddress/1a2b3c'
            streetNr: '1'
            streetName: UnterDenLinden
            city: Berlin
            country: Germany
            postcode: '10117'
            '@type': GeographicAddress
            geographicLocation:
              id: afuih78g
              '@type': GeographicLocation
          birthdate: '1970-11-02'
          email: jane.doe@email.com
          email_verified: true
          family_name: Doe
          gender: female
          given_name: Jane
          legalId:
            - '@type': IndividualIdentification
              identificationType: passport
              identificationId: 51DD1234
              issuingAuthority: US Government
              issuingDate: '2017-10-22T07:49:25.246Z'
              validFor:
                startDateTime: '2017-10-22T07:49:25.246Z'
                endDateTime: '2027-10-21T07:49:25.246Z'
              attachment:
                - attachmentType: passportCopy
                  name: PassportCopy321.pdf
                  description: Scanned copy of the passport
                  mimeType: application/pdf
                  url: 'http://DocumentManager/321/PassportCopy321.pdf'
                  '@type': Attachment
                  id: '1003'
          userPermission:
            - id: '1492026921'
              name: End-user subscription permission set
              href: 'https://mycsp.com/tmf-api/rolesAndPermissionsManagement/v5/PermissionSet/1145'
              '@type': PermissionSetRef
              '@referredType': PermissionSet
            - id: '5753026921'
              name: End-user subscription permission set
              href: 'https://mycsp.com/tmf-api/rolesAndPermissionsManagement/v5/PermissionSet/5435648'
              '@type': PermissionSetRef
              '@referredType': PermissionSet
          locale: en
          middle_name: Mary
          name: Jane Mary Doe
          nickname: JaneDoe
          phone_number: +1 (425) 555-1212
          phone_number_verified: true
          picture: 'https://someurl.com/janeDoe.jpg'
          preferred_username: janeDoe
          profile: 'https://my.blog.com/janeDoe'
          sub: a066ffd5-f685-43bc-ad57-bfb7639decb0
          website: 'https://janedoe.com'
          zoneinfo: America/Los_Angeles
      description: >-
        This example details how userinfo is retrieved for a user. In this example a valid
        Authorization token must be present in the header i.e. "header": "authorization: Bearer
        {ACCESS_TOKEN}".
    Userinfo_retrieve_example_response:
      value:
        id: '3180'
        href: 'https://host:port/userInfo/a066ffd5-f685-43bc-ad57-bfb7639decb0'
        '@schemaLocation': 'https://mycsp.com:8080/tmf-api/schema/Common/Userinfo.schema.json'
        '@type': Userinfo
        address:
          id: 1a2b3c
          href: 'https://host:port/location/geographicAddress/1a2b3c'
          streetNr: '1'
          streetName: UnterDenLinden
          city: Berlin
          country: Germany
          postcode: '10117'
          '@type': GeographicAddress
          geographicLocation:
            id: afuih78g
            '@type': GeographicLocation
        birthdate: '1970-11-02'
        email: jane.doe@email.com
        email_verified: true
        family_name: Doe
        gender: female
        given_name: Jane
        legalId:
          - '@type': IndividualIdentification
            identificationType: passport
            identificationId: 51DD1234
            issuingAuthority: US Government
            issuingDate: '2017-10-22T07:49:25.246Z'
            validFor:
              startDateTime: '2017-10-22T07:49:25.246Z'
              endDateTime: '2027-10-21T07:49:25.246Z'
            attachment:
              - attachmentType: passportCopy
                name: PassportCopy321.pdf
                description: Scanned copy of the passport
                mimeType: application/pdf
                url: 'http://DocumentManager/321/PassportCopy321.pdf'
                '@type': Attachment
                id: '1003'
        userPermission:
          - id: '1492026921'
            name: End-user subscription permission set
            href: 'https://mycsp.com/tmf-api/rolesAndPermissionsManagement/v5/PermissionSet/1145'
            '@type': PermissionSetRef
            '@referredType': PermissionSet
          - id: '5753026921'
            name: End-user subscription permission set
            href: 'https://mycsp.com/tmf-api/rolesAndPermissionsManagement/v5/PermissionSet/5435648'
            '@type': PermissionSetRef
            '@referredType': PermissionSet
        locale: en
        middle_name: Mary
        name: Jane Mary Doe
        nickname: JaneDoe
        phone_number: +1 (425) 555-1212
        phone_number_verified: true
        picture: 'https://someurl.com/janeDoe.jpg'
        preferred_username: janeDoe
        profile: 'https://my.blog.com/janeDoe'
        sub: a066ffd5-f685-43bc-ad57-bfb7639decb0
        website: 'https://janedoe.com'
        zoneinfo: America/Los_Angeles
      description: >-
        The Userinfo entity is not a list and therefore there is no operation to retrive userinfo by
        ID. Userinfo is retrieved for the user specified in the header token.